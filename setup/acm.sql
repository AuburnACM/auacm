-- MySQL dump 10.13  Distrib 5.7.17, for Linux (i686)
--
-- Host: localhost    Database: acm
-- ------------------------------------------------------
-- Server version	5.7.17

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `acm`
--

/*!40000 DROP DATABASE IF EXISTS `acm`*/;

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `acm` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `acm`;

--
-- Table structure for table `blog_posts`
--

DROP TABLE IF EXISTS `blog_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_posts` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `subtitle` varchar(255) NOT NULL,
  `post_time` int(10) unsigned NOT NULL,
  `body` text NOT NULL,
  `username` varchar(32) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `comp_names`
--

DROP TABLE IF EXISTS `comp_names`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comp_names` (
  `cid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(32) NOT NULL,
  `start` int(10) unsigned NOT NULL,
  `stop` int(10) unsigned NOT NULL,
  `closed` int(1) NOT NULL,
  PRIMARY KEY (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `comp_problems`
--

DROP TABLE IF EXISTS `comp_problems`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comp_problems` (
  `label` varchar(2) NOT NULL,
  `cid` int(10) unsigned NOT NULL,
  `pid` int(32) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`),
  KEY `pid` (`pid`),
  CONSTRAINT `comp_problems_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `problems` (`pid`)
) ENGINE=InnoDB AUTO_INCREMENT=252 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `comp_users`
--

DROP TABLE IF EXISTS `comp_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comp_users` (
  `cid` int(10) unsigned NOT NULL,
  `username` varchar(32) NOT NULL,
  `team` varchar(32) NOT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=327 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `problem_data`
--

DROP TABLE IF EXISTS `problem_data`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `problem_data` (
  `pid` int(32) NOT NULL DEFAULT '0',
  `time_limit` int(11) DEFAULT NULL,
  `description` text,
  `input_desc` text,
  `output_desc` text,
  PRIMARY KEY (`pid`),
  CONSTRAINT `problem_data_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `problems` (`pid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem_data`
--

LOCK TABLES `problem_data` WRITE;
/*!40000 ALTER TABLE `problem_data` DISABLE KEYS */;
INSERT INTO `problem_data` VALUES (1,10,'Since the days of yore, alchemy has been studied and practiced. The practice makes\r\nalchemists able to transmute materials into other forms. Transmuting materials requires\r\ndrawing a transmutation circle on the ground. A little known fact about transmutation\r\ncircles is they can be drawn inside or outside other transmutation circles. By activating\r\ncertain configurations in the correct order, more powerful transmutations can be\r\nproduced. Activating circles incorrectly can have drastic effects on the alchemist\'s body.\r\n\r\nA young alchemist named Nicholas Flamel would like to learn the ways of alchemy. He is\r\ngoing to draw several configurations of transmutation circles on the ground. When a\r\ncircle is drawn it burns bright red representing the element of fire. The drawing of the\r\ncircle itself produces no energy, but it has an effect on any and all circles that are\r\nalready drawn inside! All of the circles inside the newly drawn circle quickly change to\r\ntheir complement elements. Fire changes to a cool blue representing water. Circles that\r\nwere blue for water will burn fiery red once again. This transformation can either create\r\nor drain energy. Interestingly, it is the transformation, and not the drawing, that\r\nemanates energy. Beware, energy can go negative at any time draining the alchemist\'s\r\nlife force.\r\n\r\nNicholas wants to get as much out of his transmutations as possible. To do so requires\r\nhim to draw his circles in an order that releases the most energy. Determine the\r\nmaximum amount of energy that can be released, and the order in which he should\r\ndraw the circles.','Each input will consist of a single test case. Note that your program may be run multiple\r\ntimes on different inputs. Each test case will start with a line with a single integer **n**\r\n(1≤**n**≤2,000) indicating the number of circles. The next **n** lines will describe the circles, in\r\norder, from circle 1 to circle **n**. Each line will describe its circle with 5 integers, with a\r\nsingle space between integers:\r\n\r\n**x y r a b**\r\n\r\nWhere **(x,y)** is the center of the circle (-20,000≤**x**,**y**≤20,000), **r** is the radius of the circle\r\n(1≤r≤20,000), a is the energy released in the transition from fire to water, and **b** is the\r\nenergy released in the transition from water to fire (-500≤**a**,**b**≤500). It is guaranteed that\r\nno two circles’ edges will intersect.','Output exactly two lines. On the first line output a single integer representing the\r\nmaximum energy that can be produced by activating the circles. On the second line\r\noutput the order of drawing the circles that can produce that energy. If more than one\r\norder will work, output the one that comes first lexicographically. Output a single space\r\nbetween integers. Output no extra spaces.'),(2,90,'As you may know, balloons are handed out during ACM contests to teams as\r\nthey solve problems. However, this sometimes presents logistical challenges. In\r\nparticular, one contest hosting site maintains two rooms, A and B, each\r\ncontaining a supply of balloons. There are **N** teams attending the contest at that\r\nsite, each sitting at a different location. Some are closer to room A, others are\r\ncloser to room B, and others are equally distant. Given the number of balloons\r\nneeded by each team and the distance from each team to room A, and to room\r\nB, what is the minimum total possible distance that must be traveled by all\r\nballoons as they are delivered to their respective teams, assuming they are\r\nallocated in an optimal fashion from rooms A and B? For the purposes of this\r\nproblem, assume that all of the balloons are identical.','There will be several test cases in the input. Each test case will begin with a line\r\nwith three integers:\r\n\r\n**N A B**\r\n\r\nWhere **N** is the number of teams (1 ≤ **N** ≤ 1,000), and **A** and **B** are the number of\r\nballoons in rooms A and B, respectively (0 ≤ **A**,**B** ≤ 10,000). On each of the next\r\nN lines there will be three integers, representing information for each team:\r\n\r\n**K DA DB**\r\n\r\nWhere **K** is the total number of balloons that this team will need, **DA** is the\r\ndistance of this team from room A, and **DB** is this team’s distance from room B\r\n(0 ≤ **DA**,**DB** ≤ 1,000). You may assume that there are enough balloons – that is,\r\nΣ(**K**’s) ≤ **A**+**B**. The input will end with a line with three 0s.','For each test case, output a single integer, representing the minimum total\r\ndistance that must be traveled to deliver all of the balloons. Count only the\r\noutbound trip, from room A or room B to the team. Don’t count the distance that a\r\nrunner must travel to return to room A or room B. Print each integer on its own\r\nline with no spaces. Do not print any blank lines between answers.'),(3,90,'Start with an integer, N0, which is greater than 0. Let N1 be the number of ones in the binary representation of N0. So, if N<sub>0</sub>=27, N<sub>1</sub>=4. For all i>0, let N</sub>i</sub> be the number of ones in the binary representation of N<sub>i</sub>-1. This sequence will always converge to one. For any starting number, N<sub>0</sub>, let K be the minimum value of i>=0 for which N<sub>i</sub>=1. For example, if N<sub>0</sub>=31, then N<sub>1</sub>=5, N<sub>2</sub>=2, N<sub>3</sub>=1, so K=3.\r\nGiven a range of consecutive numbers, and a value X, how many numbers in the\r\nrange have a K value equal to X?','There will be several test cases in the input. Each test case will consist of three\r\nintegers on a single line:\r\n    LO HI X\r\nWhere **LO** and **HI** (1 ≤ **LO** ≤ **HI** ≤ 10^18) are the lower and upper limits of a range\r\nof integers, and **X** (0 ≤ **X** ≤ 10) is the target value for K. The input will end with a\r\nline with three 0s.','For each test case, output a single integer, representing the number of integers\r\nin the range from **LO** to **HI** (inclusive) which have a K value equal to **X** in the\r\ninput. Print each integer on its own line with no spaces. Do not print any blank\r\nlines between answers.'),(4,90,'This problem is based on the game of Black Vienna. In this version there are three players and 18 cards labeled A-R. Three of the cards are set aside (hidden) and form the \"Black Vienna\" gang. The remaining cards are shuffled and dealt to the players so that each player has 5 cards. Players never reveal their cards to each other. There is a separate deck of \"interrogation cards\" which contain three distinct letters in ascending order, like ACG or BHR. Turns rotate through players 1, 2, and 3. On each player\'s turn, that player selects an interrogation card, puts it face up in front of another player, and that other player must indicate the total number of these cards being held, without saying which ones. All players see the result of the \"interrogation\". The play continues until a player deduces the three cards in the \"gang\".\r\n\r\nFor example, suppose the cards are distributed as follows, and the game then proceeds:\r\n\r\n   Player 1: DGJLP; Player 2: EFOQR; Player 3: ACHMN; Gang: BIK  \r\n   Turn 1: Player 1 interrogates player 2 with BJK; answer 0  \r\n   Turn 2: Player 2 interrogates player 3 with ABK; answer 1  \r\n   Turn 3: Player 3 interrogates player 2 with DEF; answer 2  \r\n   Turn 4: Player 1 interrogates player 2 with EIL; answer 1  \r\n   Turn 5: Player 2 interrogates player 3 with FIP; answer 0  \r\n   Turn 6: Player 3 interrogates player 1 with GMO; answer 1  \r\n   Turn 7: Player 1 interrogates player 2 with OQR; answer 3  \r\n   Turn 8: Player 2 interrogates player 3 with ADQ; answer 1  \r\n   Turn 9: Player 3 interrogates player 1 with EGJ; answer 2  \r\n\r\nIn fact, the game does not need to get to turn 9. With enough thought, player 1 can deduce after turn 8 that the gang is BIK. It is your job to analyze records of games and deduce the earliest time that the gang could be determined for sure.','The input will consist of one to twelve data sets, followed by a line containing only 0.\r\n\r\nThe first line of a dataset contains the number, t, of turns reported, 2 ≤ t ≤ 5.\r\n\r\nThe next line contains four blank separated strings for the hands of players 1, 2, and 3, followed by the cards for the gang.\r\n\r\nThe remaining t lines of the data set contain the data for each turn in order. Each line contains three blank separated tokens: the number of the player interrogated, the string of interrogation letters, and the answer provided.\r\n\r\nAll letter strings will contain only capital letters from \'A\' to \'R\', in strictly increasing alphabetical order. The same interrogation string may appear in more than one turn of a game.','There is one line of output for each data set. The line contains the single character \"?\" if no player can be sure of the gang after all the turns listed. If a player can determine the gang, the line contains the earliest turn after which one or more players can be sure of the answer.'),(5,90,'Bud bought a new board game. He is hooked. He has been playing it over and\r\nover again, and he thinks can solve any board with the minimum number of\r\nmoves, but he is uncertain. He wants you to write a program to calculate the\r\nminimum number of moves required to solve different boards, so that he can\r\ndouble check his answers.\r\n\r\nYou are given a 6x6 board, and a set of 2x1 or 3x1 (vertical) or 1x2 or 1x3\r\n(horizontal) pieces. You can slide the horizontal pieces horizontally only, and the\r\nvertical pieces vertically only. You may slide a piece if there are no other pieces,\r\nnor walls, obstructing its path.\r\n\r\nThere will be one special 1x2 horizontal piece. There will also be a gap in the\r\nwall, on the right side, on the same row as the special piece, that only the special\r\npiece can fit through. The goal of the game is to get that one special horizontal\r\npiece out of the gap on the right side.\r\n\r\nSliding a piece any number of squares is considered one move. (i.e. sliding a\r\npiece horizontally one square is one move, and sliding it two squares at once is\r\nalso considered one move).','There will be several test cases. Each test case will begin with a line with a single\r\ncapital letter, indicating the special piece which must be moved off of the board.\r\nThe next 6 lines will consist of 6 characters each. These characters will either be\r\na \'.\' (period), indicating an empty square, or a capital letter, indicating part of a\r\npiece. The letters are guaranteed to form pieces that are 1x2, 1x3, 2x1 or 3x1,\r\nand no letter will be used to represent more than one piece on any given board.\r\nThe letter indicating the special piece is guaranteed to correspond to a 1x2 piece\r\nsomewhere on the board. The end of data is indicated by a single \'*\' (asterisk)\r\non its own line.','For each test case, print a single integer, indicating the smallest number of\r\nmoves necessary to remove the given special piece, or **-1** if it isn‟t possible. Print\r\neach integer on its own line. There should be no blank lines between answers.'),(6,90,'A puzzle adapted from a 2007 Games Magazine consists of a collection of hexagonal tiles packed together with each tile showing a letter. A *bouncing path* in the grid is a continuous path, using no tile more than once, starting in the top row, including at least one tile in the bottom row, and ending in the top row to the right of the starting tile. *Continuous* means that the next tile in a path always shares an edge with the previous tile.\r\n\r\nEach bouncing path defines a sequence of letters. The sequence of letters for the path shown in Figure 1 is BCBCBC. Note that this is just BC repeated three times. We say a path has a *repetitive pattern of length n* if the whole sequence is composed of two or more copies of the first n letters concatenated together. Figure 2 shows a repetitive pattern of length four: the pattern BCBD repeated twice. Your task is to find bouncing paths with a repetitive pattern of a given length.\r\n\r\nIn each grid the odd numbered rows will have the same number of tiles as the first row. The even numbered rows will each have one more tile, with the ends offset to extend past the odd rows on both the left and the right.','The input will consist of one to twelve data sets, followed by a line containing only 0.\r\nThe first line of a data set contains blank separated integers *r c n* , where *r* is the number of rows in the hex pattern (2 ≤ r ≤ 7), *c* is the number of entries in the odd numbered rows, (2 ≤ c ≤ 7), and *n* is the required pattern length (2 ≤ n ≤ 5). The next *r* lines contain the capital letters on the hex tiles, one row per line. All hex tile characters for a row are blank separated. The lines for odd numbered rows also start with a blank, to better simulate the way the hexagons fit together.','There is one line of output for each data set. If there is a bouncing path with pattern length n,\r\nthen output the pattern for the *shortest* possible path. If there is no such path, output the phrase: `no solution`. The data sets have been chosen such that the shortest solution path is unique, if one exists.'),(7,90,'The ACM Student Chapter has just been given custody of a number of school bulletin boards. Several members agreed to clear off the old posters. They found posters plastered many levels deep. They made a bet about how much area was left clear, what was the greatest depth of posters on top of each other, and how much of the area was covered to this greatest depth. To determine each bet\'s winner, they made very accurate measurements of all the poster positions as they removed them. Because of the large number of posters, they now need a program to do the calculations. That is your job.\r\n\r\nA simple illustration is shown above: a bulletin board 45 units wide by 40 high, with three posters, one with corners at coordinates (10, 10) and (35, 20), another with corners at (20, 25) and (40, 35), and the last with corners at (25, 5) and (30, 30). The total area not covered by any poster is 1300. The maximum number of posters on top of each other is 2. The total area covered by exactly 2 posters is 75.','The input will consist of one to twenty data sets, followed by a line containing only 0. On each line the data will consist of blank separated nonnegative integers.\r\n\r\nThe first line of a dataset contains integers *n w h*, where *n* is the number of posters on the bulletin board, w and h are the width and height of the bulletin board. Constraints are 0 < *n* ≤ 100; 0 < *w* ≤ 50000; 0 < *h* ≤ 40000.\r\n\r\nThe dataset ends with n lines, each describing the location of one poster. Each poster is rectangular and has horizontal and vertical sides. The x and y coordinates are measured from one corner of the bulletin board. Each line contains four numbers *xl yl xh* and *yh*, where *xl* and *yl*, are the lowest values of the x and y coordinates in one corner of the poster and *xh* and *yh* are the highest values in the diagonally opposite corner. Each poster fits on the bulletin board, so 0 ≤ *xl* < *xh* ≤ w, and 0 ≤ *yl* < *yh* ≤ *h*.','There is one line of output for each data set containing three integers, the total area of the bulletin board that is not covered by any poster, the maximum depth of posters on top of each other, and the total area covered this maximum number of times.\r\n\r\nCaution: An approach examining every pair of integer coordinates might need to deal with 2 billion coordinate pairs'),(8,90,'Whenever you buy a light bulb, the package will state an amount of time that the\r\nbulb should last. But, that\'s assuming the bulb is on continuously. Most people\r\nturn their light bulbs on and off. How does this affect their lifetime?\r\nA friend of yours has built a rig to test this. Given a simple pattern, his rig will turn\r\nthe bulb on and off, and a light sensor will tell when the bulb burns out. The\r\npattern has a very simple syntax. It consists of a list of elements, separated by\r\nspaces. Each element is either a number **M** (1 ≤ **M** ≤ 1,000,000), indicating a\r\nnumber of milliseconds, or a repeating list. A repeating list consists of one or\r\nmore elements, surrounded by parentheses, and followed by a ‘*’ and then an\r\ninteger **K** (1 ≤ **K** ≤ 100). This integer **K** indicates how many times the list should\r\nbe repeated. Your friend’s machine always starts with the bulb on, and then goes\r\nthrough the pattern. For every integer, it waits that number of milliseconds, and\r\nthen switches the bulb. If the bulb is on, it\'s turned off, and if it\'s off, it gets turned\r\nback on. If the machine reaches the end of the pattern, it will start again from the\r\nbeginning.\r\nFor example, with this pattern:\r\n\r\n``` 1 3 5```\r\n\r\nThe machine will start by turning the bulb on.\r\n- It will wait 1 millisecond and turn the bulb off.\r\n- It will then wait 3 milliseconds and turn the bulb on.\r\n- It will then wait 5 milliseconds and turn the bulb off.\r\n- It will then wait 1 millisecond and turn the bulb on.\r\n- It will then wait 3 milliseconds and turn the bulb off.\r\nIt will continue like this until the bulb burns out.\r\nHere\'s an example of a pattern with a repeating section:\r\n1 (3 5)*2 7\r\nThe machine will start by turning the bulb on, and will change the bulb’s state\r\nafter 1 millisecond, then 3, then 5, then 3, then 5, then 7, then 1.....\r\nNote that repeating sections can be nested inside of repeating sections.\r\nYour friend is not good with programming, though, so he\'s asked you to help. He\r\ncan easily measure how long it takes for the bulb to actually burn out - but, how\r\nlong SHOULD it have taken? Assume that turning the bulb on and off does NOT\r\naffect its life. Also assume that changing the bulb’s state takes no time.\r\nGiven a life **N** in milliseconds, and a pattern of turning the bulb on and off, how\r\nmany actual milliseconds would elapse before the bulb is on for exactly **N**\r\nmilliseconds?','There will be several test cases in the input. Each test case will consist of two lines. The first line will contain an integer **N** (1 ≤ **N** ≤ 1,000,000,000) which is the expected life of the bulb in milliseconds. \r\n\r\nThe second line will contain a string, which is the pattern. The pattern will not be longer than 500 characters. The pattern consists of a list of elements, separated by single spaces. Each element is either a number **M** (1 ≤ **M** ≤ 1,000,000), indicating a number of milliseconds, or a repeating list. A repeating list consists of one or more elements, surrounded by parentheses, and followed by a ‘\\*’ and then an integer **K** (1 ≤ **K** ≤ 100). There will be single spaces separating elements of a list, but nowhere else. In particular, note that there will not be any spaces surrounding the ‘\\*’ at the end of a repeating list, nor immediately following an opening parenthesis, nor immediately before a closing parenthesis. The total amount of time represented by a pattern, including all repetition, will be no greater than 1,000,000,000.\r\n\r\n\r\nThe input will terminate with a line with a single 0.','For each test case, output a single integer on its own line, indicating the number\r\nof milliseconds of total elapsed time until the bulb has been lit for **N** milliseconds.\r\nOutput no extra spaces, and do not separate answers with blank lines.'),(9,90,'A city wants to get rid of their unsightly power poles by moving their power cables\r\nunderground. They have a list of points that all need to be connected, but they\r\nhave some limitations. Their tunneling equipment can only move in straight lines\r\nbetween points. They only have room for one underground cable at any location\r\nexcept at the given points, so no two cables can cross.\r\n\r\nGiven a list of points, what is the least amount of cable necessary to make sure\r\nthat every pair of points is connected, either directly, or indirectly through other\r\npoints?','There will be several test cases in the input. Each test case will begin with an\r\ninteger **N** (2 ≤ **N** ≤ 1,000), which is the number of points in the city. On each of\r\nthe next **N** lines will be two integers, **X** and **Y** (-1,000 ≤ **X**,**Y** ≤ 1,000), which are\r\nthe (**X**,**Y**) locations of the **N** points. Within a test case, all points will be distinct.\r\nThe input will end with a line with a single 0.','For each test case, output a single real number, representing the least amount of\r\ncable the city will need to connect all of its points. Print this number with exactly\r\ntwo decimal places, rounded. Print each number on its own line with no spaces.\r\nDo not print any blank lines between answers.'),(10,90,'In our region, the contest traditionally starts at 12:30 and lasts for 5 hours. If you are able to submit a solution at 12:39, the wise judges would determine that 9 minutes had elapsed since the start of the contest. Sadly, as the day grows longer, the judges have more trouble doing the calculations accurately (how quickly can you determine the elapsed time for a 3:21 submission?)\r\n\r\nHaving struggled for many years, the judges developed the following system. Before the contest starts, they place the following table on the board at the front of the room\r\n\r\nWhen a problem is submitted with a given time-stamp, they determine which row of the table to use, based upon the hour of the time-stamp. Then, the formula in the right column is used to compute the number of elapsed minutes. For example, with a submission time of 12:39, the top row is applied with XX=39, leading to the elapsed minutes calculated as 39 - 30 = 9. For a program submitted at 3:21, the fourth row is used to calculate 21 + 150 = 171 elapsed minutes.\r\nYour goal is to develop a program that generates the appropriate table given knowledge of the starting time and duration of a contest.','The input starts with a line containing a single integer 1 ≤ N ≤ 30 that is the number of cases. Following this are N lines, with each line containing integral values SH, SM, DH, DM separated by spaces. The values 1 ≤ SH ≤ 12 and 0 ≤ SM ≤ 59 respectively represent the hour and minute at which a contest starts. The values 0 ≤ DH ≤ 10 and 0 ≤ DM ≤ 59 represent the duration of the contest in terms of hours and minutes. A contest will last at least 1 minute and at most 10 hours and 59 minutes. This allows us to omit any A.M. or P.M. designations for the times.','For each case, you are to produce a table formatted as shown in the Example Output. Any row in which the hour designator is a single digit (e.g., 5:XX) should have a single leading space, as should the header of the table just before the word \"time\".\r\n\r\nThe table must have a row for every hour block in which a program might be submitted. Assume that the earliest possible submission is precisely the contest starting time (i.e., 0 elapsed minutes), and that the latest possible submission has an elapsed time of the full duration of the contest (e.g., 5:30 in our region).'),(11,90,'You are walking with a friend, when you pass a candy store. You make a comment about\r\nhow unhealthy their wares are. Your friend issues an interesting challenge: who can be\r\nthe unhealthiest? Both of you will go into the store with the same amount of money.\r\nWhoever buys candy with the most total calories wins!\r\nSince you\'re a smart computer scientist, and since you have access to the candy store\'s\r\ninventory, you decide not to take any chances. You will write a program to determine\r\nthe most calories you can buy. The inventory tells you the price and calories of every\r\nitem. It also tells you that there is so much in stock that you can buy as much of any kind\r\nof candy as you want. You can only buy whole pieces of candy.','There will be multiple test cases in the input. Each test case will begin with a line with an integer **n** (1≤**n**≤5,000), and an amount of money **m** ($0.01≤**m**≤$100.00), separated by a single space, where **n** is the number of different types of candy for sale, and **m** is the amount of money you have to spend. The monetary amount **m** will be expressed in dollars with exactly two decimal places, and with no leading zeros unless the amount is less than one dollar. There will be no dollar sign. Each of the next **n** lines will have an integer **c** (1≤**c**≤5,000) and an amount of money **p** ($0.01≤**p**≤$100.00), separated by a single space, where **c** is the number of calories in a single piece of candy, and **p** is the price of a single piece of candy, in dollars and in the same format as **m**. The input will\r\nend with a line containing \'**0 0.00**\'.','For each test case, output a single integer, indicating the maximum amount of calories you can buy with up to **m** dollars. Output no spaces, and do not separate answers with blank lines.'),(12,90,'In an attempt to demonstrate the practicality of electric cars, ElecCarCo is sponsoring a cross-country road rally. There are n charging stations for the rally where cars may check in and charge their batteries. The rally may require multiple days of travel. Each car can travel four hours (240 minutes) between charges. A car must be plugged into a charger for two minutes for each minute of travel time. Cars start the rally at noon on the first day, fully charged. Cars are permitted remain at a station even after they are fully charged. It is only possible to drive directly between select pairs of stations. Variations in traffic conditions, road conditions, availability of HOV lanes, etc., result in different travel times along each route depending upon the time of day at which travel along that route begins. All roads are two-way, and the prevailing conditions affect travel in both directions. The winner is the first car to reach checkpoint **n**-1, starting from checkpoint 0. Other than the starting and ending conditions, cars may pass through the stations in any order, and need not visit all stations to complete the course. Write a program to determine the earliest time, expressed as the total number of minutes elapsed since the start of the rally, at which a car could reach the final checkpoint.','There will be several test cases in the input. Each test case starts with a line containing **n** (1≤**n**≤500), the number of stations, and **m** (1≤**m**≤1,000), the number of connecting road segments. \r\n\r\nThis is followed by **m** blocks, each block describing one road segment. A road segment block has the following structure: \r\n\r\nEach block begins with a single line containing two integers, **a** and **b** (0≤**a**,**b**≤**n**-1, **a**≠**b**). These numbers are the two checkpoints connected by that segment. The connections are undirected: a segment permitting travel from station **a** to station **b** will also allow travel from station **b** to station **a**. \r\n\r\nThis is followed by from one to twenty \'travel lines\' describing travel times. Each of the travel lines contains 3 numbers: **Start**, **Stop**, (0≤**Start**<**Stop**≤1,439), and **Time** (0<**Time**<1,000). **Start** and **Stop** are the time of day (expressed in minutes since midnight) described by this line, and **Time** is the travel time, in minutes, required to traverse this road segment if travel begins at any time in the range [**Start**..**Stop**], inclusive. The first travel line in a block will have a start time of 0 (midnight, or 00:00). The final travel line in a block will have a stop time of 1439 (i.e., 23:59, or 1 less than 24 hours times 60 minutes). Adjacent travel lines in the input will be arranged in order, and the start time of any line after the first is one higher than the stop time of the preceding line. The travel lines will cover all times from 00:00 to 23:59.\r\n\r\n\r\nInput will end with a line with two **0**s. All test cases will describe a course that can be completed by the cars.','For each test case, output a single integer representing the smallest number of minutes needed to complete the rally. Output no spaces, and do not separate answers with blank lines.'),(13,90,'Years before Candy Crush became the wildly popular game that may lead developer Saga to a multibillion dollar IPO, there was an online game named Cash Cow, which remains part of the Webkinz\r\nplatform.\r\n\r\nThis single-player game has a board with 12 rows and 10 columns, as shown in Figure 1. We label the rows 1 through 12, starting at the bottom, and the columns _a_ through _j_, starting at the left. Each grid location can either have a colored circle or be empty. (We use uppercase characters to denote distinct colors, for example with B=blue, R=red, and Y=yellow.) On each turn, the player clicks on a circle. The computer determines the largest \"cluster\" to which that circle belongs, where a cluster is defined to include the initial circle, any of its immediate horizontal and vertical neighbors with matching color, those circles\' neighbors with matching colors, and so forth. For example, if a user were to click on the blue circle at cell (h10) in Figure 1, its cluster consists of those cells shown with empty circles in Figure 2.\r\n\r\n![Figure 1](//i.imgur.com/LTyZoEM.png \"Figure 1\")\r\n\r\nThe player\'s turn is processed as follows. If the indicated grid cell belongs to a cluster of only one or two circles (or if there is no circle at that cell), the turn is wasted. Otherwise, with a cluster of 3 or more\r\ncircles, all circles in the cluster are removed from the board. Remaining circles are then compacted as follows:\r\n\r\n1. Circles fall vertically, to fill in any holes in their column. \r\n2. If one or more columns have become empty, all remaining columns slide leftward (with each nonempty column remaining intact), such that they are packed against the left edge of the board.\r\n\r\nFor example, Figure 3 shows the board after the cluster of Figure 2 was removed after the click on (h10).\r\n\r\nAs another example, Figure 4 below, portrays the processing of a subsequent click on cell (j1). During\r\nthat turn, column (e) becomes empty, and the resulting columns (f) through (j) slide to become columns\r\n(e) through (i), respectively. Figure 5 provides one further example in which several columns are compacted.\r\n\r\n![Figure 2](//i.imgur.com/ZRmBehO.png \"Figure 2\")\r\n\r\n![Figure 3](//i.imgur.com/3c3hUDa.png \"Figure 3\")','The input will consist of multiple games, each played with a new board. For each game, the input begins with a number _T_ that denotes the number of turns that the player will be making, with 1 ≤ _T_ ≤ 20. Following that will be an initial board configuration, which always has 12 rows and 10 columns per row, with uppercase letters used to denote distinct colors. There will never be empty cells within the initial board. Following the presentation of the initial board will be _T_ additional lines of input, each designating a cell of the grid; we rely on the coordinate system illustrated in the above figures, with a lowercase letter, from `a` to `j`, denoting a column and a number from 1 to 12 that denotes a row. We note that if a player clicks on a grid cell that does not currently have any circle, that turn is simply wasted.\r\n\r\nThe end of the entire input will be designated by a line with the number **0**.','For each game, output a single line designating the the number of circles that remain on the board after all of the player\'s turns are processed.'),(14,90,NULL,NULL,NULL),(15,90,'**Chomp** is a two-player strategy game played on a rectangular chocolate bar made up of smaller square blocks (cells). The players take turns choosing one block and “eating it” (removing it from the board), together with those that are above it and to its right. The bottom left block is *poisoned* and the player who is forced to eat it loses. The following diagram shows a game beginning with a 3-by-3 board. The **X** indicates the *poisoned* cell.\r\n\r\n<img src=\"//i.imgur.com/dWjQRHf.png\" width=\"95%\" height=\"95%\">\r\n\r\nA position in the game is a winning position if there is a move that results in a losing position for\r\nthe opponent. A position in the game is a losing position, if every move from that position either eats the poisoned square (losing the game) or results in a winning position for the opponent.\r\n\r\nIn the example above, the 1 × 1 and equal armed **L**-shaped positions are losing positions (since the opponent can mirror the current player). \r\n\r\nThe 3 × 3, unequal armed **L** and 1 × **n** positions are winning positions.\r\n\r\nThe aim of this problem is to “solve” 3-by-100 ***Chomp***. That is, for each possible position, determine whether it is a winning or losing position.\r\n\r\nA position in 3-by-100 ***Chomp***, is determined by the number, *p*, of squares in the bottom row, the number, ***q***, of squares in the middle row and the number, *r*, of squares in the top row with:\r\n\r\n    100 ≥ p ≥ q ≥ r ≥ 0\r\n\r\nWrite a program which, for each possible position in the 3 by 100 game of ***Chomp***, determines whether it is a winning or losing position.','The first line of input contains a single integer ***P***, (1 ≤ ***P*** ≤ 1000), which is the number of data sets that follow. Each data set should be processed identically and independently.\r\n\r\nEach data set consists of a single line of input. It contains the data set number, ***K***, followed by the counts 100 ≥ ***p*** ≥ ***q*** ≥ ***r*** ≥ 0 of squares in the bottom row (***p***), middle row (***q***) and top row (***r***) respectively separated by single spaces.','For each data set there is a single line of output. If the input position is a losing position, the output line consists of the data set number, ***K***, followed by a single space followed by the (capital) letter ‘**L**’.\r\n\r\nOtherwise (the input position is a winning position), the output line consists of the data set number, ***K***, followed by the (capital) letter ‘**W**’.'),(16,90,'*On the first day of Christmas, my true love gave to me, a partridge in a\r\npear tree.*\r\n\r\nGreat. I wanted an iPad.\r\n\r\n*On the second day of Christmas, my true love gave to me, two turtle\r\ndoves, and a partridge in a pear tree.*\r\n\r\nOK, now I have 4 birds: two turtle doves and a partridge today, and a partridge from\r\nyesterday. My cats are going crazy.\r\n\r\n*On the third day of Christmas, my true love gave to me, three french hens,\r\ntwo turtle doves, and a partridge in a pear tree.*\r\n\r\nWhat\'s with the birds? I now have ten of them, and no place to put them (except inside\r\nthe cats). How long can my true love keep this up?\r\n\r\nGiven a number of days of Christmas, figure out the total number of gifts I\'m going to\r\nreceive.','There will be several test cases in the input. Each test case will consist of a single integer **n** (1≤**n**≤1,000,000), on its own line. The input will end with a line with a single 0.','For each test case, output a single integer, indicating the number of gifts I’m going to receive, in total. Output no spaces, and do not separate answers with blank lines.'),(17,90,NULL,NULL,NULL),(18,90,NULL,NULL,NULL),(19,90,'A combination lock consists of a circular dial, which can be turned (clockwise or counterclockwise) and is embedded into the \"fixed\" part of the lock. The dial has N evenly spaced \"ticks\". The ticks are numbered from 0 to N-1, increasing in the clockwise direction. The fixed part of the lock has a \"mark\" which always \"points to\" a particular tick on the dial. Of course, the mark points to different ticks as the dial is turned.\r\n\r\n![Figure 1](//i.imgur.com/5Wk4KXK.png \"Figure 1\")\r\n\r\n\r\nThe lock comes with three code numbers `T1`, `T2`, `T3`. These are non-negative integers and each of them is less than N. No two of the three are the same. The lock is opened in three stages of operations:\r\n\r\n\r\n1. Turn the dial clockwise exactly two full revolutions, and continue to turn it clockwise until the mark points to tick `T1`.\r\n2. Turn the dial one full revolution counterclockwise and continue to turn it counterclockwise until the mark points to tick `T2`.\r\n3. Turn the dial clockwise until the mark points to tick `T3`. The lock should now open.\r\n\r\n\r\nYou must find the maximum possible number of ticks the dial must be turned in order to open the lock. The number of ticks turned is defined to be the sum of the ticks turned in the three stages outlined above, and is always positive regardless of direction.','The input file consists of a number of test cases, one test case per line. Each line of the input file contains four integers: **_N_**, **_T1_**, **_T2_**, **_T3_**, in this order, separated by blank spaces. The integer **_N_** is a multiple of 5, (25 ≤ **_N_** ≤ 100). The numbers **_T1_**, **_T2_** and **_T3_** satisfy the constraints stated under the description above. The input will be terminated by a line with four blank-separated 0’s.','For each test case, print the maximum possible number of ticks the dial must be turned in order to open the lock. Print each on its own line. There should be no blank lines between outputs.'),(20,90,NULL,NULL,NULL),(21,90,'Strategies for compressing two-dimensional images are often based on finding regions with high similarity. In this problem, we explore a particular approach based on a hierarchical decomposition of the image. For simplicity, we consider only bitmapped images such as the following:\r\n\r\n![Figure 1](http://i.imgur.com/amC1VhC.png \"Figure 1\")\r\n\r\nThe image is encoded as a tree, with the root representing the entire image region. If a region is monochromatic, then the node for that region is a leaf storing the color of the region. Otherwise, the region is divided into four parts about its center, and the approach is applied recursively to each quadrant. For a non-leaf node, its four children represent the four quadrants ordered as upper-right, upper-left, lower-left, lower-right respectively. As an example, here is the tree encoding of the above image.\r\n\r\n![Figure 2](http://i.imgur.com/CwEekie.png \"Figure 2\")\r\n\r\nThe original image is not monochromatic, so we considered the four quadrants. The top-right quadrant is monochromatic white, so the first child of the root node is a leaf with value 0. The top-left quadrant is not monochromatic, so it is further divided into four subquadrants, each of which is trivially monochromatic. This results in the subtree with leaf values 0, 0, 1, 0. The final two quadrants are monochromatic with respective values 0 and 1.\r\nAs a larger example, here is an 8x8 image and the tree encoding of it.\r\n\r\n![Figure 3](http://i.imgur.com/MRI57kV.png)\r\n\r\n![Figure 4](http://i.imgur.com/X3WYO3C.png \"Figure 4\")\r\n\r\nThus far we have described a *lossless* compression scheme, but the approach can be used for *lossy* compression with the following adjustment. Instead of continuing the decomposition until reaching a monochromatic region, a threshold such as 75% is used, and a leaf is created whenever a region has at least that percentage of either color. As an example, here is the encoding of the above 8x8 image if using 75% as the threshold.\r\n\r\n![Figure 5](http://i.imgur.com/bAvQE7i.png \"Figure 5\")\r\n\r\nNotice that 75% of the top-left quadrant of the full image is black, and therefore the second child of the root is 1, and that more than 75% of the bottom-left quadrant of the full image is white, and therefore the third child of the root is 0. However, neither white nor black reaches 75% in the top-right quadrant, so the recursive decomposition continues, but all four of those subquadrants achieve the 75% threshold and become leaves. If we were to uncompress the image based on this new lossy encoding, we get back the following result.\r\n\r\n![Figure 6](http://i.imgur.com/dBmTtiB.png \"Figure 6\")\r\n\r\nYour goal is to determine the image that results from this lossy compression scheme, given an original bitmap image and a specific threshold percentage.','The input will consist of a series of data sets, followed by a line containing only 0. Each data set begins with a line containing values W and T, where W is the width of the bitmap and T is the threshold percentage. Images will always be square with 1 ≤ W ≤ 64 being a power of two. Threshold T will be an integer with 51 ≤ T ≤ 100. Following the specification of W and T are W additional lines, each of which is a string of width W containing only characters 0 and 1, representing a row of the image bitmap, from top to bottom.','For each data set, you should print an initial line of the form \"Image 1:\" numbering the images starting with 1. Following that should be W lines, with each line representing a row of the resulting bitmap as a string of characters 0 and 1, from top to bottom.'),(22,10,'A 10x10x10 three-dimensional grid of tightly packed cubic atomic energy cells aboard the starship Fiugtuwf is reporting failures on several of its cells. The ship\'s engineer must set up enclosures that will contain all of the cells that are reported to be failing, in order to avoid a meltdown. It is imperative that the enclosures be finished in the shortest amount of time, even if that requires some healthy cells to be enclosed along with the defective ones. The enclosures are formed by square panels which fit perfectly between adjacent cells, or can be placed along the sides of the cells on the edges of the grid. Each panel is exactly the size and shape of a face of one of the cubic cells. For full containment, each enclosure must be completely closed. Given the coordinates of each defective cell, report the minimum number of panels required to contain the problem.','Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will start with a line with a single integer **n** (0≤**n**≤1,000) indicating the number of defective cells. Each of the next **n** lines will hold an (**x**,**y**,**z**) coordinate (0≤**x**,**y**,**z**≤9) indicating the location in the grid of a defective cell. All of the coordinates in a test case will be unique.','Output a single line with a single integer, indicating the minimum number of panels\r\nrequired to contain the defective cells. Output no spaces.'),(23,90,NULL,NULL,NULL),(24,90,'A tree is formed from a strictly increasing sequence of integers as follows:\r\n\r\n* The first integer in the sequence is the root of the tree\r\n* The next set of consecutive integers in the sequence describes the children of the root. The first of these will be greater than **_root_** + 1.\r\n* From there, each set of consecutive integers describes the children of the lowest numbered node which does not yet have children.\r\n* Non-consecutive integers mark a break between one set of children and the next.\r\n\r\nFor example, the sequence:\r\n\r\n    1 3 4 5 8 9 15 30 31 32\r\n\r\nWould produce the following tree:\r\n\r\n![Figure 1](//i.imgur.com/9dOiwhq.png \" Figure 1\")\r\n\r\nTwo nodes are considered to be _Cousins_ if they have different parents, but their parents are siblings. Given a tree and a particular node of that tree, count the number of _Cousins_ of the node.','There will be several test cases in the input. Each test case will begin with a line with two integers, **_n_** (1 ≤ **_n_** ≤ 1,000) and **_k_** (1 ≤ **_k_** ≤ 1,000,000), where **_n_** is the number of nodes in the tree, and **_k_** is the particular node of interest. On the following line will be **_n_** integers, all in the range from 1 to 1,000,000, and guaranteed to be strictly increasing. These describe the tree, in the manner described above. The integers will be separated with a single space. There will be no extra spaces. The value **_k_** is guaranteed to be one of the integers on the second line. Input will end with a line with two **0**s.','For each test case, output a single integer, indicating the number of cousins of node **_k_**. Output no spaces, and do not separate answers with blank lines.'),(25,90,'The Gorelians are a warlike race that travel the universe conquering new worlds as a form of recreation. Generally, their space battles are fairly one-sided, but occasionally even the Gorelians get the worst of an encounter. During one such losing battle, the Gorelians’ space ship became so damaged that the Gorelians had to evacuate to the planet below. Because of the chaos (and because escape pods are not very accurate) the Gorelians were scattered across a large area of the planet (yet a small enough area that we can model the relevant planetary surface as planar, not spherical). Your job is to track their efforts to regroup. Fortunately, each escape pod was equipped with a locator that can tell the Gorelian his current coordinates on the planet, as well as with a radio that can be used to communicate with other Gorelians. Unfortunately, the range on the radios is fairly limited according to how much power one has.\r\n\r\n\r\nWhen a Gorelian lands on the alien planet, the first thing he does is check the radio to see if he can communicate with any other Gorelians. If he can, then he arranges a meeting point with them, and then they converge on that point. Once together, they are able to combine the power sources from their radios, which gives them a larger radio range. They then repeat the process—see who they can reach, arrange a meeting point, combine their radios—until they finally cannot contact any more Gorelians.\r\n\r\n\r\nGorelian technology allows two-way communication _as long as at least one of them_ has a radio with enough range to cover the distance between them. For example, suppose Alice has a radio with a range of 40 km, and Bob has a range of 30 km, but they are 45 km apart (Figure 1). Since neither has a radio with enough range to reach the other, they cannot talk. However, suppose they were only 35 km apart (Figure 2). Bob’s radio still does not have enough range to reach Alice, but that does not matter—they can still talk because Alice’s radio has enough range to reach Bob.\r\n\r\n![Figure 1](//i.imgur.com/xTJwHlP.png \"Figure 1\")\r\n\r\nIf a Gorelian successfully contacts other Gorelians, they will meet at the point that is the average of all their locations. In the case of Alice and Bob, this would simply be the midpoint of A and B (Figure 3). Note that the Gorelians turn off their radios while traveling; they will not attempt to communicate with anyone else until they have all gathered at the meeting point. Once the Gorelians meet, they combine their radios to make a new radio with a larger range. In particular, the _area_ covered by the new radio is equal to the sum of the _areas_ covered by the old radio. In our example, Alice had a range of 40 km, so her radio covered an area of 1600π km. Bob’s radio covered an area of 900π km. So when they combine their radios they can cover 2500π km—meaning they have a range of 50 km. At this point they will try again to contact other Gorelians.\r\n\r\n![Figure 2](//i.imgur.com/rgmWyYA.png \"Figure 2\")\r\n\r\nThis process continues until no more Gorelians can be contacted. As an example, suppose the following Gorelians have all landed and all have a radio range of 30 km: Alice (100, 100), Bob (130, 80), Cathy (80, 60), and Dave (120, 150). At this point, none of the Gorelians can contact anyone else (Figure 5). Now Eddy lands at position (90, 80) (Figure 6). Eddy can contact Alice and Cathy, so they arrange to meet at (90, 80), which is the average of their locations. Combining their radios gives them a range of √2700 ≈ 51.96 km (Figure 7).\r\n\r\n![Figure 3](//i.imgur.com/7fPd9k3.png \"Figure 3\")\r\n\r\nNow they check again with their new improved range and find that they can reach Bob. So they meet Bob at (110, 80) and combine their radios to get a new radio with a range of 60 (Figure 8). Unfortunately, this is not far enough to be able to reach Dave, so Dave remains isolated.\r\n\r\n![Figure 4](//i.imgur.com/b0uRbCp.png \"Figure 4\")','The input will consist of one or more data sets. Each data set will begin with an integer _N_ representing the number of Gorelians for this dataset (1 ≤ _N_ ≤ 100). A value of _N_ = 0 will signify the end of the input.\r\n\r\nNext will come _N_ lines each containing three integers _X_, _Y_, and _R_ representing the x- and y-coordinate where the Gorelian lands and the range of the radio (0 ≤ _X_ ≤ 1000, 0 ≤ _Y_ ≤ 1000, and 1 ≤ _R_ ≤ 1000). Note that only the Gorelians\' _initial_ coordinates/range will be integral; after merging with other Gorelians they may no longer be integral. _You should use double-precision arithmetic for all computations_.\r\n\r\nThe Gorelians land in the order in which they appear in the input file. When a Gorelian lands, he merges with any\r\nGorelians he can contact, and the process keeps repeating until no further merges can be made. The next Gorelian does\r\nnot land until all previous merges have been completed.','The output will be one line per data set, reporting the number of independent groups of Gorelians that remain at the end of the process.'),(26,90,'Given a circle, and a list of lines, how many parts has the circle been cut into? In the\r\nfollowing example, four lines cut the circle into five parts.\r\n\r\n![Figure 1](//i.imgur.com/wxdJoRp.png \"Figure 1\")','There will be several test cases in the input. Each test case will begin with four integers, ***r*** (1 ≤ ***r*** ≤ 1,000), ***x***, ***y*** (-1,000 ≤ ***x***, ***y*** ≤ 1,000), and ***n*** (0 ≤ ***n*** ≤ 1,000), where r is the radius of a circle, ***x*** and ***y*** are the coordinates of the center of the circle, and ***n*** is the number of lines. On each of the next ***n*** lines will be four integers, ***x1***, ***y1***, ***x2*** and ***y2*** (-1,000 ≤ ***x1***, ***y1***, ***x2***, ***y2*** ≤ 1,000). These describe a line passing through (***x1***, ***y1***) and (***x2***, ***y2***). Note that we’re interested in the whole, infinite line, not just the segment between (***x1***, ***y1***) and (***x2***, ***y2***). In any test case, no more than two lines will intersect at any point inside the circle, no lines will be tangent to the circle, and no two lines will be coincident. The input will end with a line with four **0**s.','For each test case, output a single integer, indicating the number of parts that the circle\r\nis cut into. Output no spaces, and do not separate answers with blank lines.'),(27,90,NULL,NULL,NULL),(28,90,'Any rational fraction can be represented in decimal notation. Using parentheses to\r\ndenote repeating decimal digits, consider the following examples:\r\n\r\n    4/2 = 2\r\n    1/4 = 0.25\r\n    10/3 = 3.(3)\r\n    1/7 = 0.(142857)\r\n    1/45 = 0.0(2)\r\n\r\nEach of these requires a different number of characters. 4/2 = 2, so it requires only one\r\ncharacter. 1/7 = 0.(142857), so it needs 10. Given an integer ***n***, what is the greatest\r\nnumber of characters needed to represent any fraction **a**/**b**, where 1 ≤ **a**, **b**≤ **n**?','There will be several test cases in the input. Each test case will consist of a single integer\r\n**n** (1 ≤ **n** ≤ 500) on its own line. Input will end with a line with a single **0**.','For each test case, output a single integer, indicating the maximum number of characters needed to represent any **a**/**b**, where 1 ≤ **a**, **b** ≤ **n**. Output no spaces, and do not separate answers with blank lines.'),(29,90,'The first question on the *Data Structures and Algorithms* final exam has a list of **N** terms and a second list of **N** definitions. Students are to match each term with the correct definition.\r\n\r\nUnfortunately, Joe, who wrote a Visual BASIC program in high school and assumed he knew all\r\nthere was to know about Computer Science, did not bother to come to class or read the textbook. He has to guess randomly what the matches are. Let `S(N, k)` be the number of ways Joe can answer the question and get at least the first `k` matches wrong.\r\n\r\nFor this problem, you will write a program to compute `S(N, k)`.','The first line of input contains a single integer **P**, (**1** ≤ **P** ≤ **1000**), which is the number of data sets that follow. Each data set should be processed identically and independently.\r\n\r\nEach data set consists of a single line of input containing three space separated decimal integers. The first integer is the data set number. The second integer is the number, `N` (1 ≤ `N` ≤ 17), of terms to be matched in the question. The third integer is the number, `k` (0 ≤ `k` ≤ `N`), of initial matches to be incorrect.','For each data set there is a single line of output. It contains the data set number followed by a single space which is then followed by the value of `S(N, k)`.'),(30,90,'When Grace was in third grade, her elementary school teacher assigned her the following problem:\r\n\r\n\r\n>_What is the smallest possible sum of two numbers that together use the numerals 1, 2, 7, 8,\r\nand 9?_\r\n\r\n\r\nGrace figured out that the answer to this problem is 207 (for example, as 78 + 129), but when the teacher assigned four pages of similar problems as homework, Grace got bored. It turns out that Grace was a rather advanced third grader, so she decided that it would be more fun to write a computer program to solve such problems. Surely you can do the same!','Each problem is described on a single line. The line begins with an integer _N_, such that 2 ≤ _N_ ≤ 14, designating the number of numerals included in the problem. Following that are those _N_ numerals. There will always be at least 2 numerals that are nonzero. The end of the input is designated by a line containing only the value 0.','For each case, output a line with the minimum sum _S_ that can be achieved. Please keep in mind that by standard convention, the numeral _0_ cannot appear as the first digit of either summand.'),(31,90,'In Windows, a DLL (or dynamic link library) is a file that contains a collection of pre-compiled functions that can be loaded into a program at runtime. The two primary benefits of DLLs are (1) only one copy of a DLL is needed in memory, regardless of how many different programs are using it at the same time, and (2) since they are separate from programs, DLLs can be upgraded independently, without having to recompile the programs that use them. (DLLs have their problems, too, but we’ll ignore those for now.) Your job is to calculate the maximum memory usage when running a series of programs together with the DLLs they need.\r\n\r\nThe DLLs in our system are not very exciting. These dull DLLs (or DuLLs) each require a fixed amount of memory which never changes as long as the DuLL is in memory. Similarly, each program has its own fixed memory requirements which never change as long as the program is executing. Each program also requires certain DuLLs to be in memory the entire time the program is executing. Therefore, the only time the amount of memory required changes is when a new program is executed, or a currently running program exits. When a new program begins execution, all DuLLs required by that program that must be loaded into memory if they are not there already. When a currently running program exits, all DuLLs that are no longer needed by any currently running programs are removed from memory.\r\n\r\nRemember, there will never be more than one copy of a specific DuLL in memory at any given time. However, it is possible for multiple instances of the same program to be running at the same time. In this case each instance of the program would require its own memory; however, the instances still share DuLLs in the same way two unrelated programs would.','The input consists of at least one data set, followed by a line containing only 0.\r\n\r\n\r\nThe first line of a data set contains three space separated integers **N P S**, where **N** is the number of DuLLs available, 1 ≤ **N** ≤ 20, **P** is the number of programs which can be executed, 1 ≤ **P** ≤ 9, and **S** is the number of state transitions recorded, 1 ≤ **S** ≤ 32.\r\n\r\n\r\nThe next line contains exactly **N** space separated integers representing the **sizes** in bytes of each of the DuLLs, 1 ≤ **size** ≤ 1,000. Each DuLL is implicitly labeled with a letter: ‘*A*’, ‘*B*’, ‘*C*’, …, possibly extending to ‘*T*’. Therefore the first integer is the size of ‘*A*’, the second integer is the size of ‘*B*’, and so on.\r\n\r\n\r\nThe next **P** lines contain information about each of the programs, one program per line. Each line contains a single integer representing the **size** of the program in bytes, 1 ≤ **size** ≤ 1,000, followed by 1 to **N** characters representing the DuLLs required by that program. There will be a single space between the size of the program and the DuLL labels, but no spaces between the labels themselves. The order of the labels is insignificant and therefore undefined, but they will all be valid DuLL labels, and no label will occur more than once. Each program is implicitly labeled with an integer: *1*, *2*, *3*, ... possibly extending to *9*.\r\n\r\n\r\nThe final line of the data set will contain **S** space separated integers. Each integer will either be a positive number **q**, 1 ≤ **q** ≤ **P**, indicating that a new execution of program **q** has begun, or else it will be a negative number –**q**, 1 ≤ **q** ≤ **P**, indicating that a single execution of program **q** has completed. The transitions are given in the order they occurred. Each is a valid program number; if it is a negative number –**q** then there will always be at least one instance of program **q** running.','There is one line of output for each data set, containing only the maximum amount of memory required throughout the execution of the data set.'),(32,90,'The company _Al\'s Chocolate Mangos_ has a web site where visitors can guess how many chocolate\r\ncovered mangos are in a virtual jar. Visitors type in a guess between 1 and 99 and then click on a\r\n\"Submit\" button. Unfortunately, the response time from the server is often long, and visitors get\r\nimpatient and click \"Submit\" several times in a row. This generates many duplicate requests.\r\n\r\n\r\nYour task is to write a program to assist the staff at _ACM_ in filtering out these duplicate requests.','The input consists of a series of lines, one for each web session. The first integer on a line is _N_,\r\n0 < _N_ ≤ 25, which is the number of guesses on this line. These guesses are all between 1 and 99,\r\ninclusive. The value _N_ = 0 indicates the end of all the input.','For each input data set, output a single line with the guesses in the original order, but with\r\nconsecutive duplicates removed. Conclude each output line with the dollar sign character \'$\'. Note\r\nthat there is a single space between the last integer and the dollar sign.'),(33,90,NULL,NULL,NULL),(34,90,NULL,NULL,NULL),(35,90,'In one of his notebooks, Euclid gave a complex procedure for solving the following problem. With computers, perhaps there is an easier way.\r\n\r\nIn a 2D plane, consider a line segment `AB`, another point `C` which is not collinear with `AB`, and a triangle `DEF`. The goal is to find points `G` and `H` such that:\r\n\r\n* H is on the ray AC (it may be closer to A than C or further away, but angle CAB is the same as angle HAB)\r\n* `ABGH` is a parallelogram (`AB` is parallel to `HG`, `AH` is parallel to `BG`)\r\n* The area of parallelogram `ABGH` is the same as the area of triangle `DEF`\r\n\r\n![Figure 1](//i.imgur.com/H1oFCTy.png \"Figure 1\")','There will be several test cases. Each test case will consist of twelve real numbers, with no more than 3 decimal places each, on a single line. Those numbers will represent, in order:\r\n\r\n    AX AY BX BY CX CY DX DY EX EY FX FY\r\n\r\nwhere point `A` is (`AX`, `AY`), point `B` is (`BX`, `BY`), and so on. Points `A`, `B` and `C` are guaranteed to NOT be collinear. Likewise, `D`, `E` and `F` are also guaranteed to be non-collinear. Every number is guaranteed to be in the range from `-1000.0` to `1000.0` inclusive. End of the input will be signified by a line with twelve 0.0\'s.','For each test case, print a single line with four decimal numbers. These represent points `G` and `H`, like this:\r\n\r\n    GX GY HX HY\r\n\r\nwhere point `G` is (`GX`, `GY`) and point `H` is (`HX`, `HY`). Print all values rounded to 3 decimal places of precision (NOT truncated). Print a single space between numbers. Do not print any blank lines between answers.'),(36,90,NULL,NULL,NULL),(37,90,NULL,NULL,NULL),(38,90,NULL,NULL,NULL),(39,90,NULL,NULL,NULL),(40,90,'Like many families with small children, my family’s refrigerator is adorned with a set of alphabet magnets: 26 separate magnets, each containing one letter of the alphabet. These magnets can be rearranged to create words and phrases. I feel it is my parental duty to use these magnets to create messages that are witty and insightful, yet at the same time caring and supportive. Unfortunately, I am somewhat hindered in this task by the fact that I can only make phrases that use each letter once.\r\n\r\n\r\nFor example, a nice inspiring message to leave for the children might be, “I LOVE YOU.” Unfortunately, I cannot make this message using my magnets because it requires two letter \"O\"s. I can, however, make the message, “I LOVE MUSTARD.” Admittedly this message isn\'t as meaningful, but it does manage to not use any letters more than once.\r\n\r\n\r\nYou are to write a program that will look at a list of possible phrases and report which phrases can be written using refrigerator magnets.','The input will consist of one or more lines, ending with a line that contains only the word “END”.\r\n\r\nEach line will be 60 characters or less, and will consist of one or more words separated by a single space each, with words using only uppercase letters (A–Z). There will not be any leading or trailing whitespace, and there will not be any blank lines.','Output only the lines which can be written in refrigerator magnets—that is, the lines which have no\r\nduplicate letters. Output them exactly the same as they were in the input—white spaces and all. Do not\r\noutput the final “END” string.'),(41,90,'For this problem you will write a search engine that takes a query, searches a collection of words, and finds the lexicographically smallest word that matches the query (i.e., the matching word that would appear first in an English dictionary). A _query_ is a sequence of one or more terms separated by single vertical bars (\"|\"). A _term_ is one or more letters followed by zero or more signed letters. A _signed_ letter is either +_s_ (\"positive\" _s_) or -_s_ (\"negative\" _s_), where _s_ is a single letter. All letters are lowercase, and no letter will appear more than once within a term. A query will not contain spaces. A term matches a word if the word contains at least one of the unsigned letters, all of the positive letters, and none of the negative letters; a query matches a word if at least one of its terms matches the word.','The input consists of one or more test cases followed by a line containing only \"#\" that signals the end of the input. Each test case consists of 1–100 words, each on a line by itself, followed by a line containing only \"\\*\" that marks the end of the word list, followed by one or more queries, each on a line by itself, followed by a line containing only \"\\*\\*\" that marks the end of the test case. Each word will consist of 1–20 lowercase letters. All words within a test case will be unique. Each query will be as defined above and will be 1–79 characters long.','For each query, output a single line containing the lexicographically smallest word _within that test case_ that matches the query, or the word `NONE` if there is no matching word. At the end of each test case, output a dollar sign on a line by itself.'),(42,90,'American Carnival Makers Inc. (ACM) has a long history of designing rides and attractions. One of their more popular attractions is a fun house that includes a room of mirrors. Their trademark is to set up the room so that when looking forward from the entry door, the exit door appears to be directly ahead. However, the room has double-sided mirrors placed throughout at 45 degree angles. So, the exit door can be on any of the walls of the room. The set designer always places the entry and mirrors, but can never seem to be bothered to place the exit door. One of your jobs as part of the construction crew is to determine the placement of the exit door for the room given an original design.\r\n\r\n\r\nThe final diagram for a sample room is given below. The asterisk (*) marks the entry way, lower case x\'s mark the walls, the mirrors are given by the forward and backward slash characters (`/ and \\`), open spaces with no visual obstructions are marked by periods (.), and the desired placement of the exit is marked with an ampersand (&). In the input diagram, there is an \'x\' in place of the \'&\', since the exit has not yet been located. You need to alter the input diagram by replacing the proper \'x\' with an \'&\' to identify the exit. Note that entrances and exits can appear on any of the walls (although never a corner), and that it is physically impossible for the exit to be the same as the entrance. (You don\'t need to understand why this is so, although it may be fun to think about.)\r\n\r\n    xxxxxxxxxxx\r\n    x../..\\...x\r\n    x..../....x\r\n    *../......x\r\n    x.........x\r\n    xxxxxx&xxxx','Each room will be preceded by two integers, **_W_** and **_L_**, where 5 ≤ **_W_** ≤ 20 is the width of the room including the border walls and 5 ≤ **_L_** ≤ 20 is the length of the room including the border walls. Following the specification of **_W_** and **_L_** and **_L_** additional lines containing the room diagram, with each line having **_W_** characters from the alphabet: `{ *, x, ., /, \\ }`. The perimeter will always be compromised of walls, except for one asterisk (*) which marks the entrance; the exit is not (yet) marked. A line with two zeros indicates the end of input data.','For each test case, the first line will contain the word, `HOUSE`, followed by a space and then an integer that identifies the given fun house sequentially. Following that should be a room diagram which includes the proper placement of the exit door, as marked by an ampersand (&).\r\n\r\n\r\n###Note:\r\n\r\n---\r\n\r\nIn both java and C++ the backslash character (\\\\) has a special meaning as an escape character within character and string literals. you must use the combination `\\\\` to express a single backslash within a character or string literal within source code.'),(43,90,NULL,NULL,NULL),(44,90,'In the book _All Creatures of Mythology_, gnomes are kind, bearded creatures, while goblins tend to be bossy and simple-minded. The goblins like to harass the gnomes by making them line up in groups of three, ordered by the length of their beards. The gnomes, being of different physical heights, vary their arrangements to confuse the goblins. Therefore, the goblins must actually measure the beards in centimeters to see if everyone is lined up in order.\r\n\r\nYour task is to write a program to assist the goblins in determining whether or not the gnomes are lined up properly, either from shortest to longest beard or from longest to shortest.','The input starts with line containing a single integer _N_, 0 < _N_ < 30, which is the number of groups to\r\nprocess. Following this are _N_ lines, each containing three distinct positive integers less than 100.','There is a title line, then one line per set of beard lengths. See the sample output for capitalization\r\nand punctuation.'),(45,10,NULL,NULL,NULL),(46,90,NULL,NULL,NULL),(47,90,'An educational software company, All Computer Math (ACM), has a section on multiplication of integers. They want to display the calculations in the traditional grade school format, like the following computation of 432 × 5678:\r\n\r\n        432\r\n       5678\r\n    -------\r\n       3456\r\n      3024\r\n     2592\r\n    2160\r\n    -------\r\n    2452896\r\n\r\nNote well that the final product is printed without any leading spaces, but that leading spaces are necessary on some of the other lines to maintain proper alignment. However, as per our regional rules, there should _never_ be any lines with _trailing_ white space. Note that the lines of dashes have length matching the final product.\r\n\r\nAs a special case, when one of the digits of the second operand is a zero, it generates a single 0 in the partial answers, and the next partial result should be on the _same_ line rather than the next line down. For example, consider the following product of 200001 × 90040:\r\n\r\n         200001\r\n          90040\r\n    -----------\r\n        8000040\r\n    180000900\r\n    -----------\r\n    18008090040\r\n\r\nThe rightmost digit of the second operand is a 0, causing a 0 to be placed in the rightmost column of the first partial product. However, rather than continue to a new line, the partial product of 4 × 200001 is placed on the same line as that 0. The third and fourth least-significant digits of the second operand are zeros, each resulting in a 0 in the second partial product on the same line as the result of 9 × 200001. As a final special case, if there is only one line in the partial answer, it constitutes a full answer, and so there is no need for computing a sum. For example, a computation of 246 × 70 would be formatted as:\r\n\r\n      246\r\n       70\r\n    -----\r\n    17220\r\n\r\nYour job is to generate the solution displays.','The input contains one or more data sets. Each data set consists of two positive integers on a line, designating the operands in the desired order. Neither number will have more than 6 digits, and neither will have leading zeros. After the last data set is a line containing only `0 0`.','For each data set, output a label line containing \"Problem \" with the number of the problem, followed by the complete multiplication problem in accordance with the format rules described above.\r\n\r\nWarning: A standard int type cannot properly handle 12-digit numbers. You should use a 64-bit type (i.e., a long in Java, or a long long in C++).'),(48,90,NULL,NULL,NULL),(49,90,NULL,NULL,NULL),(50,90,NULL,NULL,NULL),(51,90,NULL,NULL,NULL),(52,90,NULL,NULL,NULL),(53,10,NULL,NULL,NULL),(54,90,'Given a sequence of integers `a1, a2, a3, ..., an`, an _island_ in the sequence is a contiguous subsequence for which each element is greater than the elements immediately before and after the subsequence. In the examples below, each island in the sequence has a bracket below it. The bracket for an island contained within another island is below the bracket of the containing island.\r\n\r\n![Alt text](http://i.imgur.com/C72i6SR.png \"Figure 1\")\r\n\r\nWrite a program that takes as input a sequence of **15** non-negative integers, in which each integer differs from the previous integer by at most **1**, and outputs the number of islands in the sequence.','The first line of input contains a single integer _**P**_, (**1** ≤ _**P**_ ≤ **1000**), which is the number of data sets that follow. Each data set should be processed identically and independently.\r\n\r\n\r\nEach data set consists of a single line of input. It contains the data set number, **_K_**, followed by **15** non-negative integers separated by a single space. The first and last integers in the sequence will be 0. Each integer will differ from the previous integer by at most 1.','For each data set there is one line of output. The single output line consists of the data set number, **_K_**, followed by a single space followed by the number of islands in the sequence.'),(55,90,'Many people are familiar with a standard 3-ball juggling pattern in which you throw ball A, then ball B, then ball C, then ball A, then ball B, then ball C, and so on. Assuming we keep a regular rhythm of throws, a ball that is thrown higher into the air will take longer to return, and therefore will take longer before the next time it gets thrown. We say that a ball thrown to height **_h_** will not be thrown again until precisely **_h_** steps later in the pattern. For example, in the standard 3-ball pattern, we say that each ball is thrown to a height of 3, and therefore thrown again 3-steps later in the pattern. For example, ball A that we throw at time 1 of the process will be next thrown at time 4.\r\n\r\n\r\n![Figure 1](http://i.imgur.com/turcFyK.png \"Figure 1\")\r\n\r\n\r\nBy convention, we label the first ball thrown as A, and each time we introduce a new ball into the pattern, we label it with the next consecutive uppercase letter (hence B and then C in the classic pattern).\r\n\r\n\r\nThere exist more complex juggling patterns. Within the community of jugglers, a standard way to describe a pattern is through a repeating sequence of numbers that describe the height of each successive throw. This is known as the **_siteswap_** notation.\r\n\r\n\r\nTo demonstrate the notation, we first consider the \"3 4 5\" siteswap pattern. This describes an infinite series of throws based on the repeating series \"3 4 5 3 4 5 3 4 5 ...\". The first throw the juggler makes will be to a height of 3, the second throw will be to a height of 4, the third throw to a height of 5, the fourth throw to a height of 3 (as the pattern repeats), and so forth.\r\n\r\n\r\nWhile the siteswap pattern describes the heights of the throws, the actual movement of individual balls does not follow as obvious a pattern. The following diagram illustrates the beginning of the \"3 4 5\" pattern.\r\n\r\n\r\n![Figure 2](http://i.imgur.com/oSNOM35.png \"Figure 2\")\r\n\r\nThe first throw is ball A, thrown to a height of 3, and thus ball A is not thrown again until time 4. At time 2, we must make a throw with height 4; since ball A has not yet come back, we introduce a second ball,\r\nconventionally labeled B. Because ball B is thrown at time 2 with a height of 4, it will not be thrown again\r\nuntil time 6. At time 3, we introduce yet another ball, labeled C, and throw it to height 5 (thus it will next be thrown at time 8). Our next throw, at time 4, is to have height 3. However, since ball A has returned (from its throw at time 1), we do not introduce a new ball; we throw A. At time 5, we are to make a throw with height 4, yet we must introduce a new ball, D, because balls A, B, and C are all still up in the air. (Ball D is the last ball to be introduced for this particular pattern.) The juggling continues with ball B being thrown to height 5 at time 6, and so on.\r\n\r\n\r\nThe \"3 4 5\" siteswap pattern works out nicely. It happens to be a 4-ball pattern, because after introducing ball D, the juggler can now continue until his or her arms get tired. Unfortunately, not all siteswap sequences are legitimate!\r\n\r\n\r\nConsider an attempt to use a siteswap pattern \"3 5 4\". If we were only interested in making six throws, everything works well. But a problem arises at time 7, as shown in the following diagram.\r\n\r\n\r\n![Figure 3](http://i.imgur.com/jmADGyd.png \"Figure 3\")\r\n\r\n\r\nBall B was thrown at time 2 with a height of 5. Therefore, it should get its next turn to be thrown at time 7. However, ball C was thrown at time 3 with a height of 4, and so it too should get its next turn at time 7. (To add insult to injury, ball A gets thrown at time 4 with height of 3, also suggesting it get its next turn at time 7.) What we have here is a problem, resulting in a lot of balls crashing to the ground.','Each line represents a separate trial. It starts with the number 1 ≤ **_P_** ≤ 7 which represents the period of the repeating pattern, followed by **_P_** positive numbers that represent the throw heights in the pattern. An individual throw height will be at most 19. The input is terminated with a single line containing the value 0.','For each pattern, output a single line describing the first 20 throws for the given pattern, if 20 throws can be legally made. Otherwise, output the word `CRASH`. You need not be concerned with any crashes due to balls landing strictly after time 20.'),(56,10,'In Chess, a knight can move two squares in one direction and then one in a\r\nperpendicular direction. It can ‘jump’, meaning that it only requires that the destination\r\nsquare be open - the path between can be occupied. In this diagram, the knight could\r\nmove to any of the Xs.\r\n\r\n![Figure 1](http://i.imgur.com/GHh3J31.png \"Figure 1\")\r\n\r\nGiven a grid, a starting point and destination point, determine the least number of\r\nmoves the knight must make to get from the start to the destination. Some squares of\r\nthe grid may be occupied, so that the knight cannot move there.','Each input will consist of a single test case. Note that your program may be run multiple\r\ntimes on different inputs. Each test case will begin with two integers ***n*** and ***m***\r\n(2≤***n***,***m***≤100), indicating the height and width of the grid. Each of the next ***n*** lines will hold ***m*** characters, representing the grid. The grid will consist only of ‘.’ (open square),\r\n‘**#**’ (occupied square), ‘**K**’ (the knight’s starting position) or ‘**X**’ (the knight’s destination). There will be exactly one ‘**K**’ and exactly one ‘**X**’ in each test case.','Output a single line with a single integer indicating the minimum number of moves the\r\nknight needs to get to the destination, or **-1** if the knight cannot make it. Output no\r\nspaces.'),(57,10,NULL,NULL,NULL),(58,90,'Marcia loves to knit. As she knits, she wonders how many stitches the project she is working on will take to complete.\r\n\r\n\r\nOn every project, she starts with a row of a given number of stitches, and then adds more rows. Sometimes the next row will have the same number of stitches as the previous row and other times the next row will have more or less stitches than the previous row.\r\n\r\n\r\nFor example, a pattern for a triangular shawl may begin with just 3 stitches and add 2 stitches on each row. So, the first row will have 3 stitches, the second row will have 5 stitches, the third will have 7 stitches, and so on. If the project has a total of 3 rows, then it has a total of 15 stitches.\r\n\r\n\r\nA more complex scarf project may have a 4 row repeating pattern that increases 6 stitches on the first row of the pattern, decreases 2 stitches on each of the next two rows, and has no change on the final row of the pattern. So, a scarf that has 50 stitches on the first row will have 56 on the second row, 54 on the third row, 52 on the fourth row, and 52 on the fifth row. On the sixth row, the pattern repeats, so there will be an increase of 6 stitches for a total of 58 stitches on that row. If the project stops there at 6 rows, then it will have a total of 322 stitches.\r\n\r\n\r\nYou will write a program to help Marcia figure out how many stitches a project will take to complete.','The input to your program will be information about one or more projects. Each\r\nproject‟s description will take up 2 lines. The first line contains three integers:\r\n\r\n\r\n`N M K`\r\n\r\n\r\nWhere _N_ (1 ≤ _N_ ≤ 100) represents the number of stitches in the first row of the project, _M_ (1 ≤ _M_ ≤ 1000) represents the total number of rows in the project, and _K_ (1 ≤ _K_ ≤ 100) represents the number of rows in the repeating pattern. On the following line will be exactly _K_ integers, each one in the range from -100 to 100 (inclusive), indicating the repeating pattern, where negative values indicate a number of stitches to decrease, positive values indicate a number of stitches to increase, and 0 indicates no change. In any project, the pattern will never cause any row to have 0 or fewer stitches. End of input is indicated by a line with three 0‟s.','For each project, give the total number of stitches in the completed project. Print each integer answer on its own line, with no blank lines between answers.'),(59,90,'The discovery of a remarkable new insect, the Lampyridae Teleportae, more commonly known as the teleporting firefly, has sparked a no-less-remarkable number of ways to try to catch them. Rather than flying, the Lampyridae Teleportae teleports from spot to spot by warping space-time. When it stops between teleports, it hovers for a moment and flashes its light in search of a mate. So, even though they only come out after dark, it\'s easy to observe them, but very difficult to catch them. Fortunately for the Association for Catching Lampyridae (ACL), student members of the Association for Cool Machinery (ACM) recently developed the world\'s first teleporting tennis shoes. The tennis shoes are efficient enough that, when a Lampyridae Teleportae is spotted by its flash, there is always time to teleport once before the firefly itself teleports off to another location, but there is never time to teleport twice in a row before the firefly teleports away. The tennis shoes have a maximum teleport range, however, depending on how well their flux capacitor is constructed, so it\'s not always possible to catch a Lampyridae Teleportae with just a single teleport. The most efficient catching method is to remain in place until a firefly flashes, and to then teleport in a straight line directly toward it, subject to the limitation of the maximum range of ones tennis shoes, in an attempt to get close enough to catch it. If you don\'t get close enough, you wait for the next flash, teleport towards it again, and repeat, until you either catch it or it\'s gone.\r\n\r\nFor this programming problem you will simulate this procedure for catching teleporting fireflies with a few simplifying assumptions: (1) We will be chasing only one firefly at a time. (2) Firefly chasing will take place in two dimensions where all units are considered to be yards. (3) The firefly is \"caught\" if the chaser can manage to come within one yard of the firefly. (4) The chaser\'s movement toward a firefly is always in a straight line from his or her current location directly toward the flash; if the range of the chaser\'s tennis shoes prevents getting close enough to catch the firefly, the chaser will always teleport the maximum range possible (thus, although the chaser always starts at integer coordinates, it is possible and likely that any or all of the chaser\'s locations after the first teleport will be at non-integer coordinates).\r\n\r\nThe input will consist of several chase scenarios. For each scenario you will be given the maximum range in yards of the chaser\'s teleporting tennis shoes, the chaser\'s starting location, and a list of one or more flash locations for the firefly being chased. For each chase scenario your program will output a single line indicating either the flash location where the firefly was caught, or a message noting that the firefly was never caught.','The first line of a chase scenario contains three numbers, delimited by a single space, in the following order: the maximum range in yards of the chaser\'s teleporting tennis shoes, the starting x-coordinate of the chaser, and the starting y-coordinate of the chaser. The maximum range will be a positive integer from 1 to 1000. The x and y values for the starting coordinates will be integers from 0 to 1000. The remaining lines of an input scenario contain two integers each, an x-coordinate and a y-coordinate, again delimited by a single space. These are, in order of appearance, the locations where the firefly flashes. All coordinate values range from 0 to 1000. A line specifying a value of -1 for both x and y terminates the list, at which point we consider the firefly to disappear never to be seen again. Note that a firefly might be caught at a flash location prior to end of the list; in this case the rest of the flash locations listed in the input for the current chase scenario should simply be ignored.\r\n\r\n\r\nThe next input scenario begins on the line immediately after the last line of the preceding scenario. An input scenario that specifies 0 (zero) as the maximum range of the chaser will terminate the input.','Every output line will be either: (1) \"Firefly N caught at (x,y)\", where N is the input scenario number starting with 1, and (x,y) is the last location the firefly flashed before it was caught; or (2) \"Firefly N not\r\ncaught\".'),(60,90,NULL,NULL,NULL),(61,90,NULL,NULL,NULL),(62,90,NULL,NULL,NULL),(63,90,NULL,NULL,NULL),(64,90,'The tiny country of Waterlogged is protected by a series of levees that form a\r\nquadrilateral as shown below: \r\n\r\n![Figure 1](http://i.imgur.com/PCBDohb.png \"Figure 1\")\r\n\r\nThe quadrilateral is defined by four vertices. The levees partition the country into\r\nfour quadrants. Each quadrant is identified by a pair of vertices representing the\r\noutside edge of that quadrant. For example, Quadrant 1 shown below is defined\r\nby the points (x1,y1) and (x2,y2). \r\n\r\n![Figure 2](http://i.imgur.com/jcobBD0.png \"Figure 2\")\r\n\r\nIt happens very often that the country of Waterlogged becomes flooded, and the\r\nlevees need to be reinforced, but their country is poor and they have limited\r\nresources. They would like to be able to reinforce those levees that encompass\r\nthe largest area first, then the next largest second, then the next largest third,\r\nand the smallest area fourth. \r\n\r\nHelp Waterlogged identify which quadrants are the largest, and the length of the\r\nlevees around them','There will be several sets of input. Each set will consist of eight real numbers, on\r\na single line. Those numbers will represent, in order:\r\n\r\n    X1 Y1 X2 Y2 X3 Y3 X4 Y4\r\n\r\nThe four points are guaranteed to form a convex quadrilateral when taken in\r\norder – that is, there will be no concavities, and no lines crossing. Every number\r\nwill be in the range from -`1000.0` to `1000.0` inclusive. No Quadrant will have an\r\narea or a perimeter smaller than `0.001`. End of the input will be a line with eight\r\n`0.0`’s.','For each input set, print a single line with eight floating point numbers. These\r\nrepresent the areas and perimeters of the four Quadrants, like this:\r\n\r\n    A1 P1 A2 P2 A3 P3 A4 P4\r\n\r\nPrint them in order from largest area to smallest – so `A1` is the largest area. If two\r\nQuadrants have the same area when rounded to 3 decimal places, output the\r\none with the largest perimeter first. Print all values with 3 decimal places of\r\nprecision (rounded). Print spaces between numbers. Do not print any blank lines\r\nbetween outputs.'),(65,90,NULL,NULL,NULL),(66,90,NULL,NULL,NULL),(67,90,'Fred likes to play the lotto. Whenever he does, he buys lots of tickets. Each ticket has 6 unique numbers in the range from `1` to `49`, inclusive. Fred likes to “Cover all his bases.” By that, he means that he likes for each set of lottery tickets to contain every number from `1` to `49`, at least once, on some ticket. Write a program to help Fred see if his tickets “Cover all the bases.”','The input file consists of a number of test cases. Each case starts with an integer **_N_** (1 <= **_N_** <= 100), indicating the number of tickets Fred has purchased. On the next **_N_** lines are the tickets, one per line. Each ticket will have exactly 6 integers, and all of them will be in the range from **1** to **49** inclusive. No ticket will have duplicate numbers, but the numbers on a ticket may appear in any order. The input ends with a line containing only a 0.','Print a list of responses for the input sets, one per line. Print the word `Yes` if every number from **1** to **49** inclusive appears in some lottery ticket in the set, and `No` otherwise. Print these words exactly as they are shown. Do not print any blank lines between outputs.'),(68,90,'When accessing large amounts of data is deemed too slow, a common speed up technique is to keep a small amount of the data in a more accessible location known as a _cache_. The first time a particular piece of data is accessed, the slow method must be used. However, the data is then stored in the cache so that the next time you need it you can access it much more quickly. For example, a database system may keep data cached in memory so that it doesn\'t have to read the hard drive. Or a web browser might keep a cache of web pages on the local machine so that it doesn\'t have to download them over the network.\r\n\r\n\r\nIn general, a cache is much too small to hold all the data you might possibly need, so at some point you are going to have to remove something from the cache in order to make room for new data. The goal is to retain those items that are more likely to be retrieved again soon. This requires a sensible algorithm for selecting what to remove from the cache. One simple but effective algorithm is the Least Recently Used, or LRU, algorithm. When performing LRU caching, you always throw out the data that was least recently used.\r\n\r\n\r\nAs an example, let\'s imagine a cache that can hold up to five pieces of data. Suppose we access three pieces of data—A, B, and C. As we access each one, we store it in our cache, so at this point we have three pieces of data in our cache and two empty spots (Figure 1). Now suppose we access D and E. They are added to the cache as well, filling it up. Next suppose we access A again. A is already in the cache, so the cache does not change; however, this access counts as a use, making A the most recently used. Now if we were to access F, we would have to throw something out to make room for F. At this point, B has been used least recently, so we throw it out and replace it with F (Figure 2). If we were now to access B again, it would be exactly as the first time we accessed it: we would retrieve it and store it in the cache, throwing out the least recently used data—this time C—to make room for it.\r\n\r\n\r\n![Figures](http://i.imgur.com/8RIdJnh.png \"Figures\")\r\n\r\n\r\nYour task for this problem is to take a sequence of data accesses and simulate an LRU cache. When requested, you will output the contents of the cache, ordered from least recently used to most recently used.','The input will be a series of data sets, one per line. Each data set will consist of an integer **_N_** and a string of two or more characters. The integer **_N_** represents the size of the cache for the data set (1 ≤ **_N_** ≤ 26). The string of characters consists solely of uppercase letters and exclamation marks. An uppercase letter represents an access to that particular piece of data. An exclamation mark represents a request to print the current contents of the cache.\r\n\r\n\r\nFor example, the sequence `ABC!DEAF!B!` means to access A, B, and C (in that order), print the contents of the cache, access D, E, A, and F (in that order), then print the contents of the cache, then access B, and again print the contents of the cache.\r\n\r\n\r\nThe sequence will always begin with an uppercase letter and contain at least one exclamation mark.\r\n\r\n\r\nThe end of input will be signaled by a line containing only the number zero.','For each data set you should output the line \"Simulation _S_\", where _S_ is 1 for the first data set, 2 for the second data set, etc. Then for each exclamation mark in the data set you should output the contents of the cache on one line as a sequence of characters representing the pieces of data currently in the cache. The characters should be sorted in order from least recently used to most recently used, with least recently occurring first. You only output the letters that are in the cache; if the cache is not full, then you simply will have fewer characters to output (that is, do not print any empty spaces). Note that because the sequence always begins with an uppercase letter, you will never be asked to output a completely empty cache.'),(69,90,'A mad scientist performed a series of experiments, each having *n* phases. During each phase, a measurement was taken, resulting in a positive integer of magnitude at most *k*. The scientist knew that an individual experiment was designed in a way such that its measurements were monotonically increasing, that is, each measurement would be at least as big as all that precede it. For example, here is a sequence of measurements for one such experiment with *n*=*13* and *k*=*6*:\r\n\r\n1, 1, 2, 2, 2, 2, 2, 4, 5, 5, 5, 5, 6\r\n\r\nIt was also the case that *n* was to be larger than *k*, and so there were typically many repeated values in the measurement sequence. Being mad, the scientist chose a somewhat unusual way to record the data. Rather than record each of *n* measurements, the scientist recorded a sequence *P* of *k* values defined as follows. For *1* ≤ *j* ≤ *k*, *P(j)* denoted the number of phases having a measurement of *j* or less. For example, the original measurements from the above experiment were recorded as the *P*-sequence:\r\n\r\n2, 7, 7, 8, 12, 13\r\n\r\nas there were two measurements less than or equal to 1, seven measurements less than or equal to 2, seven measurement less than or equal to 3, and so on.\r\n\r\nUnfortunately, the scientist eventually went insane, leaving behind a notebook of these *P*-sequences for a series of experiments. Your job is to write a program that recovers the original measurements for the experiments.','The input contains a series of *P*-sequences, one per line. Each line starts with the integer *k*, which is the length of the *P*-sequence. Following that are the *k* values of the *P*-sequence. The end of the input will be designated with a line containing the number *0*. All of the original experiments were designed with *1* ≤ *k* < *n* ≤ *26*.','For each *P*-sequence, you are to output one line containing the original experiment measurements separated by spaces.'),(70,10,'Mirko is playing a game of marbles. This is no ordinary game. In this game there are n\r\nbins placed from left to right. In each bin there is a number of marbles. In one move,\r\nMirko can move a single marble from a bin to a directly adjacent bin. An adjacent bin is\r\none that shares a side. He can move the same marble multiple times, but it’s considered\r\na different move every time. At the end of the game, the score is the calculated by\r\nadding up the absolute value of the difference in the number of marbles between each\r\npair of adjacent bins.\r\n\r\nConsider this example:\r\n\r\n    9 8 3 2 7 2 3 4 6\r\n\r\nIf the game ended this way, Mirko’s score would be:\r\n\r\n|9-8|+|8-3|+|3-2|+|2-7|+|7-2|+|2-3|+|3-4|+|4-6| = 1 + 5 + 1 + 5 + 5 + 1 + 1 + 2 = 21\r\n\r\nMirko would like to maximize his score, and then minimize the number of moves to\r\nachieve this score. Find these two values.','Each input will consist of a single test case. Note that your program may be run multiple\r\ntimes on different inputs. Each test case will begin with a single integer ***n*** (1 ≤ ***n*** ≤ 100,000) indicating the number of bins. On the next line there will be ***n*** integers ***m*** (0 ≤ ***m*** ≤ 1,000), with a single space between them, indicating the number of marbles in each bin, in order from left to right.','Output a single line with two integers, separated by a single space. The first is the\r\nmaximum score that Mirko can achieve, and the second is the minimum number of\r\nmoves Mirko needs to get that score. Output no extra spaces.'),(71,90,NULL,NULL,NULL),(72,90,NULL,NULL,NULL),(73,90,NULL,NULL,NULL),(74,90,'Minesweeper is a game played on a `R x C` rectangular board. Some of the cells contain mines, and others are empty. For each empty cell, calculate the number of its adjacent cells that contain mines. Two cells are adjacent if they share a common edge or point. This means that each cell has a maximum of 8 neighbors (up, down, left, right, four diagonals).','There will be multiple test cases. The first line of each test case will have two integers, `R` and `C` (1 ≤ `R`,`C` ≤ 100), indicating the number of rows and columns of the board. The next R lines each contain exactly `C` characters. Each character is either a \'*\' (asterisk) indicating a mine, or a \'.\' (period) indicating an empty cell. The last data set is followed by a line containing two 0‟s.','Print each board on `R` lines with `C` characters per line, and replace every \'.\' with the appropriate digit indicating the number of adjacent cells that contain mines. Leave the \'*\' cells intact. Do not print any whitespace between cells. Do not print any blank lines between answers.'),(75,90,'For most fonts, the lowercase letters b and d are mirror images of each other, as are the letters `p` and `q`. Furthermore, letters `i, o, v, w,` and `x` are naturally mirror images of themselves. Although other\r\nsymmetries exists for certain fonts, we consider only those specifically mentioned thus far for the\r\nremainder of this problem. \r\n\r\n\r\nBecause of these symmetries, it is possible to encode certain words based upon how those words would appear in the mirror. For example the word `boxwood` would appear as `boowxod`, and the word `ibid` as `bidi`. Given a particular sequence of letters, you are to determine its mirror image or to note that it is invalid.','The input contains a series of letter sequences, one per line, followed by a single line with the #\r\ncharacter. Each letter sequence consists entirely of lowercase letters.','For each letter sequence in the input, if its mirror image is a legitimate letter sequence based\r\nupon the given symmetries, then output that mirror image. If the mirror image does not form a legitimate\r\nsequence of characters, then output the word `INVALID`.'),(76,90,'Long ago, there were periodicals called _newspapers_, and these newspapers were printed on _paper_, and people used to _read_ them, and perhaps even share them. One unfortunate thing about this form of media is that every so often, someone would like an article so much, they would take it with them, leaving the rest of the newspaper behind for others to enjoy. Unfortunately, because of the way that paper was folded, not only would the page with that article be gone, so would the page on the reverse side and also two other pages that were physically on the same sheet of folded paper. \r\n\r\n\r\nFor this problem we assume the classic approach is used for folding paper to make a booklet that has a number of pages that is a multiple of four. As an example, a newspaper with 12 pages would be made of three sheets of paper (see figure below). One sheet would have pages 1 and 12 printed on one side, and\r\npages 2 and 11 printed on the other. Another piece of paper would have pages 3 and 10 printed on one side and 4 and 9 printed on the other. The third sheet would have pages 5, 6, 7, and 8.\r\n\r\n\r\n![alt text](http://i.imgur.com/tZ8YpMl.png \"Figure 1\")\r\n\r\n\r\nWhen one numbered page is taken from the newspaper, the question is what other pages disappear.','Each test case will be described with two integers _N_ and _P_, on a line, where 4 ≤ _N_ ≤ 1000 is a multiple of four that designates the length of the newspaper in terms of numbered pages, and 1 ≤ _P_ ≤ _N_ is a page that has been taken. The end of the input is designated by a line containing only the value 0.','For each case, output, in increasing order, the page numbers for the other three pages that will be missing.'),(77,90,NULL,NULL,NULL),(78,90,NULL,NULL,NULL),(79,90,NULL,NULL,NULL),(80,90,'Educators are always coming up with new ways to teach math to students. In 2011, an educational software company, All Computer Math (ACM), developed an\r\napplication to display products in a traditional grade school math format. ACM is now working on an updated version of the software that will display results in a lattice\r\nformat that some students find to be easier when multiplying larger numbers.\r\n\r\nAn example would be when multiplying 345 * 56 = 19320 as given below, using a lattice grid with 2 rows and 3 columns, which appears inside a surrounding frame:\r\n\r\n    +---------------+\r\n    |   3   4   5   |\r\n    | +---+---+---+ |\r\n    | |1 /|2 /|2 /| |\r\n    | | / | / | / |5|\r\n    |1|/ 5|/ 0|/ 5| |\r\n    | +---+---+---+ |\r\n    |/|1 /|2 /|3 /| |\r\n    | | / | / | / |6|\r\n    |9|/ 8|/ 4|/ 0| |\r\n    | +---+---+---+ |\r\n    |/ 3 / 2 / 0    |\r\n    +---------------+\r\n\r\nThe first operand, 345, is displayed above the top of the grid with each digit centered horizontally above its column of the grid, and the second operand, 56, is displayed\r\nalong the righthand side with each digit centered vertically at the center of its row in the grid. A single cell of the grid, such as\r\n\r\n    +---+\r\n    |3 /|\r\n    | / |\r\n    |/ 0|\r\n    +---+\r\n\r\nrepresents the product of the digit of the first operand that is above its column and the digit of the second operand that is to the right of its row. In our example, this cell\r\nrepresents the product 5 times 6 = 30 that results when multiplying the 5 in 345 and the 6 in 56. Note that the 10\'s digit of that product is placed in the upper left portion\r\nof this cell and the 1\'s digit in the lower right.\r\n\r\nThe overall product is then computed by summing along the diagonals in the lattice that represent the same place values in the result. For example, in our first problem\r\nthe product 19320 was computed as:\r\n\r\n1\'s digit = *0*\r\n10\'s digit = 5 + 3 + 4 = 12, thus *2* with a carry of 1\r\n100\'s digit = (1 carry) + 2 + 0 + 2 + 8 = 13, thus *3* with a carry of 1\r\n1000\'s digit = (1 carry) + 2 + 5 + 1 = *9*\r\n10000\'s digit = *1*\r\n\r\nThe resulting product is placed with the one\'s digit below the grid at the far right and, depending on its length, with the most significant digits wrapped around the left side\r\nof the grid. Each digit of the final product appears perfectly aligned with the corresponding diagonal summands.\r\n\r\nTo provide an aesthetic view, we use a series of minus (-) characters for horizontal lines, pipe (|) characters for vertical lines, and slash (/) characters for diagonal lines.\r\nFurthermore, we use a plus (+) character wherever a horizontal and vertical line meet. Each multiplication lattice is subsequently \"boxed\" by an outer border. There is a\r\nrow containing the first operand which is between the topmost border and the top line of the grid, and a row between the bottom of the grid and the bottom border,\r\nwhich contains some portion of the resulting product. There is one column between the leading | and the left edge of the inner grid, which may contain a portion of the\r\nresulting product, and one column after the right edge of the inner grid but before the rightmost | border, which contains the second operand. If the product is not long\r\nenough to wrap around the bottom-left corner, the column between the left border and the left edge of the grid will containing only spaces. (See the later example of 3 x 3.)\r\n\r\nLeading zeros should be displayed within lattice grid cells, but leading zeros should never be displayed in the product, nor should there ever be a slash (/) character\r\nprior to the leading digit of the product. For example, consider the product of 12 * 27 = 324 below:\r\n\r\n    +-----------+\r\n    |   1   2   |\r\n    | +---+---+ |\r\n    | |0 /|0 /| |\r\n    | | / | / |2|\r\n    | |/ 2|/ 4| |\r\n    | +---+---+ |\r\n    | |0 /|1 /| |\r\n    | | / | / |7|\r\n    |3|/ 7|/ 4| |\r\n    | +---+---+ |\r\n    |/ 2 / 4    |\r\n    +-----------+\r\n\r\nNote that in the top-right grid of the lattice, the product 2 * 2 = 04 is displayed with the zero for the tens digit. However, there is no thousands digit displayed in the\r\nproduct 324, nor is there any slash displayed above the digit 3 in that product.','The input contains one or more tests. Each test contains two positive integers, A and B, such that 1 ≤ A ≤ 9999 and 1 ≤ B ≤ 9999. The last data set will be\r\nfollowed by a line containing `0 0`.','For each data set, produce the grid that illustrates how to multiply the two numbers using the lattice multiplication technique.'),(81,90,'A museum has hired some guards and is trying to build a schedule for them. The museum would like to build a 24-hour schedule for the guards, such that:\r\n- Each guard works during the same time intervals each day.\r\n- Each guard works within his/her time windows of availability, which s/he specifies.\r\n- Each guard works at most the amount of time s/he is able, which s/he also specifies.\r\n- The guards can only shift (start or stop working) on half hour boundaries. (e.g. 04:00 or 04:30, but not 04:15).\r\n- The guards are only scheduled for shifts if they are available to work at all times during those shifts. (e.g. if a guard\'s window of availability opens at 03:05, they cannot be scheduled at 03:00.)\r\n- The minimum number of guards on duty at any time during the day is maximized. This improves security of the museum.\r\n\r\nWrite a program to help the museum staff determine the maximum number of guards that they can maintain at all times throughout a 24-hour day, given the constraints of the guards\' availability. You may assume that guard exchanges are instantaneous. That is, if 2 guards leave and 2 other guards arrive at the same time, the museum is guarded by 2 guards through this exchange.','There will be multiple test cases. Each test case begins with a line containing a single integer **N** (1 ≤ **N** ≤ 50), the number of guards available. There will then be **N** blocks of data, one for each guard.\r\n\r\nEach block provides the preferences of one guard. A block begins with two integers, **K** (1 ≤ **K** ≤ 50) and **M**  (1 ≤ **M** ≤ 1440), in that order; **K** is the number of time intervals specifying when the guard is available for work, and **M** is the maximum number of minutes s/he is able to work each day. The next **K** lines each contain the starting and ending time, in that order, of a time interval where the guard is available, separated by whitespace. These time intervals may overlap. The *union* of all **K** time intervals provides the complete set of times at which the guard is available. \r\n\r\nA starting or ending time is formatted as **HH:MM** (00 ≤ **HH** ≤ 23, 00 ≤ **MM** ≤ 59). Midnight is represented by 00:)). When the ending time is smaller than the starting time, it means the guard is available for working past midnight. For example, the interval \"23:00 03:00\" means the guard is available from 11pm at night to 3am in the morning. If the starting and ending times are equal, then the guard is available for work during any time intervals throughout the day. The last test case is followed by a line with a single 0.','For each test case, output a single integer, representing the minimum number of guards on duty at any given time during the day, using a schedule that maximizes this value. That is, output the largest integer k, such that there is a schedule where at any given moment, there are k guards on duty at the museum, assuming instantaneous exchanges specified above. Do not print any blank lines between answers.'),(82,90,NULL,NULL,NULL),(83,90,NULL,NULL,NULL),(84,90,'A Nonogram is a pencil puzzle played on a grid. The grid is initially blank. There are numbers on the side and top of the grid, which indicate how the grid squares should be filled in. The numbers measure how many unbroken lines of filled-in squares there are in any given row or column. For example, a clue of \"4 8 3\" would mean there are sets of four, eight, and three filled squares, in that order, with at least one blank square between successive groups. Here is a small example, with its solution.\r\n\r\n![Figure 1](http://i.imgur.com/uKTKcIU.png \"Figure 1\")\r\n\r\n\r\nYou are going to work backwards. Given a Nonogram solution, produce the numbers which should be at the side and top of the grid.','There will be several test cases in the input. Each test case will begin with an integer **_n_** (2 ≤ **_n_** ≤ 100) indicating the size of the grid. Each of the next **_n_** lines will have exactly **_n_** characters, consisting of either \'.\' for a blank square, or \'X\' for a square which has been filled in. The input will end with a line with a single **0**.','For each test case, print 2**_n_** lines of output. The first **_n_** lines represent the numbers for the rows, from top to bottom. The next **_n_** lines represent the numbers across the top, from left to right. If any row or column has no squares filled in, output a **0**. Put a single space between numbers on the same line. Do not output any lines with leading or trailing blanks. Do not output blank lines between any lines of output.'),(85,90,'Consider a simple variation of the card game Blackjack. In this game, a single player plays against the dealer. The game uses a standard deck of cards, where numbered cards are worth the number of points on the card for the cards numbered 2 to 10, 10 points for the face cards (King, Queen, and Jack) and either 1 or 11 points for the Aces.\r\n\r\nThe dealer deals the first card in the deck to the player, the second to the dealer, the third to the player, and the fourth to the dealer. The player then may continue to draw cards until s/he decides that the total is as close as possible to 21 and stops voluntarily or until s/he goes over 21. If the player goes over 21, the player loses. Then the dealer must draw cards until s/he reaches 17 or more points (with aces counting as 11 when possible). If the dealer goes over 21, the dealer loses. If neither of them goes over 21, the winner is the one who comes as close as possible to 21. If the player and the dealer have the same total, the player wins.\r\n\r\nFor example, suppose the first cards in the deck are Queen, 6, 4, 9, and 10. On the initial deal, the player will receive Queen and 4 (for a total of 14) and the dealer will receive 6 and 9 (for a total of 15). If the player does not select a card, the dealer will have to draw (because the dealer\'s total is less than 17) and will draw the 10, going over, so the player will win. But if the player draws a card (the\r\n10), the player\'s total will be 24, so the player will lose.\r\n\r\nIn some situations, it is impossible for the player to win. Consider the case when the cards in the deck are: 10, 3, 4, King, 3, 5. The player will be dealt the cards 10 and 4. The dealer will have 3 and King. The table below illustrates what happens for each number of cards the player might draw:\r\n\r\n![Figure 1](//i.imgur.com/EBCJaMc.png \" Figure 1\")\r\n\r\nNo matter how many cards the player draws, the player cannot win.\r\n\r\nIn this problem, you will analyze decks to determine if they lead to a situation in which the player cannot win.','The input to the program will be one or more decks. Each deck will be represented by a string, on its own line. Each deck will consist of at least 4 cards. where a card is either an integer **_d_**, (2 ≤ **_d_** ≤ 9), representing a numbered card, or one of the letters **_A_**, **_K_**, **_Q_**, **_J_** or **_T_**, representing Ace, King, Queen, Jack, or Ten, respectively. The letters will be in upper case. There will be no other characters on a line. In particular, there will be no spaces. There will always be enough cards to try all valid draws. End of input is indicated by the word `JOKER`, alone on a line.','Print a list of responses for the input sets, one per line. Print the word `Yes` if there is a number of cards the player can draw and win, and `No` if there is no way for the player to win. Print these words exactly as they are shown. Do not print any blank lines between outputs.'),(86,90,NULL,NULL,NULL),(87,90,'This problem is inspired by [Pachinko](https://en.wikipedia.org/wiki/Pachinko), a popular game in Japan. A traditional Pachinko machine is a cross between a vertical pinball machine and a slot machine. The player launches small steel balls to the top of the machine using a plunger as in pinball. A ball drops through a maze of pins that deflect the ball, and eventually the ball either exits at a hole in the bottom and is lost, or lands in one of many gates scattered throughout the machine which reward the player with more balls in varying amounts. Players who collect enough balls can trade them in for prizes.\r\n\r\n\r\nFor the purposes of this problem, a _linear_ Pachinko machine is a sequence of one or more of the following: holes (\".\"), floor tiles (\"_\"), walls (\"|\"), and mountains (\"/\\\"). A wall or mountain will never be adjacent to another wall or mountain. To play the game, a ball is dropped at random over some character within a machine. A ball dropped into a hole falls through. A ball dropped onto a floor tile stops immediately. A ball dropped onto the left side of a mountain rolls to the left across any number of consecutive floor tiles until it falls into a hole, falls off the left end of the machine, or stops by hitting a wall or mountain. A ball dropped onto the right side of a mountain behaves similarly. A ball dropped onto a wall behaves as if it were dropped onto the left or right side of a mountain, with a 50% chance for each. If a ball is dropped at random over the machine, with all starting positions being equally likely, what is the probability that the ball will fall either through a hole or off an end? \r\n\r\n\r\nFor example, consider the following machine, where the numbers just indicate character positions and are not part of the machine itself:\r\n\r\n\r\n    123456789\r\n    /\\.|__/\\.\r\n\r\n\r\nThe probabilities that a ball will fall through a hole or off the end of the machine are as follows, by position: 1=100%, 2=100%, 3=100%, 4=50%, 5=0%, 6=0%, 7=0%, 8=100%, 9=100%. The combined probability for the whole machine is just the average, which is approximately 61.111%.','The input consists of one or more linear Pachinko machines, each 1–79 characters long and on a line by itself, followed by a line containing only \"#\" that signals the end of the input.','For each machine, compute as accurately as possible the probability that a ball will fall through a hole or off the end when dropped at random, then output a single line containing that percentage _truncated_ to an integer by dropping any fractional part.'),(88,90,'A contractor is planning to bid on interior painting for an apartment building. These apartments are for student housing, so they are to be single-room efficiencies, and have basic drywall walls and ceilings, with no particular architectural features like crown molding. He would like to find a quicker way to estimate how much paint it will take to paint the walls and ceilings for each job. The plan for these buildings is to paint the four walls and the ceiling of the main room. The closets and bathrooms will not be painted. Of course, no paint is needed for window and door openings. All rooms, windows and\r\ndoors are rectangular. All rooms will be painted the same color.\r\n\r\n\r\nThe contractor will provide you with information about the dimensions of the rooms, the windows and doors for each floor plan, and the number of apartments. Your team is to write a program that will tell him how many cans of paint he should include in his bid.','There will be several test cases in the input. Each test case begins with a line with 6\r\nintegers:\r\n\r\n    n width length height area m\r\n\r\n\r\nWhere **_n_** (1 ≤ **_n_** ≤ 100) is the number of apartments, **_width_** (8 ≤ **_width_** ≤ 100) is the width of each room, **_length_** (10 ≤ **_length_** ≤ 100) is the length of each room, **_height_** (8 ≤ **_height_** ≤ 30) is the height of each room, **_area_** (100 ≤ **_area_** ≤ 1,000) is the area in square feet that can be covered by each can of paint, and **_m_** (0 ≤ **_m_** ≤ 10) is the number of windows and doors. \r\n\r\n\r\nOn each of the next **_m_** lines will be two integers, **_width_** and **_height_**, describing a door or window. No window or door will be larger than the largest wall, and both **_width_** and **_height_** will be positive. All linear measures will be expressed in feet. The input will end with a line with six **0**s.','For each test case, output a single integer on its own line, indicating the number of cans of paint needed to paint all of the walls and ceilings of all of the apartments. Output no extra spaces, and do not separate answers with blank lines.'),(89,90,'While driving the other day, John looked down at his odometer, and it read 100000. John was pretty excited about that. But, just one mile further, the odometer read 100001, and John was REALLY excited! You see, John loves palindromes – things that read the same way forwards and backwards. So, given any odometer reading, what is the least number of miles John must drive before the odometer reading is a palindrome? For John, every odometer digit counts. If the odometer reading was 000121, he wouldn\'t consider that a palindrome.','There will be several test cases in the input. Each test case will consist of an odometer reading on its own line. Each odometer reading will be from 2 to 9 digits long. The odometer in question has the number of digits given in the input - so, if the input is 00456, the odometer has 5 digits. There will be no spaces in the input, and no blank lines between input sets. The input will end with a line with a\r\nsingle 0.','For each test case, output the minimum number of miles John must drive before the odometer reading is a palindrome. This may be 0 if the number is already a palindrome. Output each integer on its own line, with no extra spaces and no blank lines between outputs.'),(90,90,NULL,NULL,NULL),(91,90,'A bit string has _odd parity_ if the number of 1\'s is odd. A bit string has _even parity_ if the number of 1\'s is even.\r\n\r\nZero is considered to be an even number, so a bit string with no 1\'s has even parity. Note that the number of 0\'s does not affect the parity of a bit string.','The input consists of one or more strings, each on a line by itself, followed by a line containing only\r\n\"#\" that signals the end of the input. Each string contains 1–31 bits followed by either a lowercase letter \'e\' or a lowercase letter \'o\'.','Each line of output must look just like the corresponding line of input, except that the letter at the\r\nend is replaced by the correct bit so that the entire bit string has even parity (if the letter was \'e\') or odd parity (if the letter was \'o\').'),(92,90,'You\'ve been invited to a party. The host wants to divide the guests into 2 teams for party games, with exactly the same number of guests on each team. She wants to be able to tell which guest is on which team as she greets them as they arrive, and as easily as possible, without having to take the time to look up each guest\'s name on a list. Being a good computer scientist, you have an idea: give her a single string, and all she has to do is determine whether the guest\'s name is alphabetically less than or greater than that string.\r\n\r\nGiven the unique names of **_n_** party guests (**_n_** is even), find the shortest possible string **_S_** such that exactly half the names are less than or equal to **_S_**, and exactly half are greater than **_S_**. If there’s more than one string of the shortest length, output the one that comes first alphabetically.','There will be multiple test cases in the input. Each test case will begin with an even integer **_n_** (2 ≤ **_n_** ≤ 1,000) on its own line. On the next **_n_** lines will be names, one per line. Each name will be a single word consisting only of capital letters, and will be at least one letter and no longer than 30 letters. All of the names in a test case will be unique. The input will end with a **0** on its own line.','For each case, output the alphabetically first of all of the shortest possible strings that your host could use to separate her guests. Output this string using all upper case letters. Do not output any spaces. Do not put a blank line between outputs.'),(93,90,'The Pascal matrix is the (infinite) matrix defined by (zero based row and column):\r\n\r\n**Pascal[row, column] = Comb(row, column) for 0 <= column <= row**\r\n\r\nand zero otherwise, where **Comb(n, k)** is the number of combinations of **n** things taken **k** at a time (the binomial coefficient).\r\n\r\n![Figure 1](//i.imgur.com/77KsU3D.png \"Figure 1\")\r\n\r\nFor this problem, you will write a program to compute entries in powers on the Pascal matrix:\r\n\r\n**Pascal<sup>P</sup> = Pascal × Pascal × ... × Pascal** (**P** factors)\r\n\r\nSince the matrix is lower triangular, all powers are lower triangular and only the upper left **N** by **N** corner is used in computing coefficients in the upper left **N** by **N** corner of the power.','The first line contains the number of data sets **k** (**1** ≤ **k** ≤ **1000**) that follow. Each data set should be processed identically and independently.\r\n\r\nEach data set consists of a single line of input containing four space-separated decimal integers. The first integer is the data set number. The second integer is the power **p** (**1** ≤ **p** ≤ **100000**), to which to raise the Pascal matrix. The third and fourth integers give the row number r and the column number **c** (**0** ≤ **c** ≤ **r** ≤ **100000**) of the desired entry.','For each data set there is a single line of output. The line consists of the data set number, a single space, which is then followed by the requested entry of the requested Powers of the Pascal matrix. Input values will be restricted so results will be restricted so results will not overflow a **6**4-bit integer value.'),(94,90,'A _Perfect Shuffle_ of a deck of cards is executed by dividing the deck exactly in half, and then alternating cards from the two halves, starting with the top half.\r\n\r\n\r\n![alt text](http://i.imgur.com/bWosIwf.png \"Figure 1\")\r\n\r\n\r\nGiven a deck of cards, perform a _Perfect Shuffle_. If there is an odd number of cards, give the top half split one more card than the bottom half.','There will be several test cases in the input. Each test case will begin with a line with a single integer **_n_** (1 ≤ **_n_** ≤ 1,000), indicating the number of cards. On each of the next **_n_** lines will be a string from 1 to 80 characters in length, which is the name of a card. It will contain only capital letters and dashes. Within a test case, all card names will be unique. Input will end with a line with a single **0**.','For each test case, output **_n_** lines, consisting of the deck after a perfect shuffle. Output no extra spaces. Do not print a blank line between answers.'),(95,90,'Following a sad and strange incident involving a room full of philosophers, several plates of spaghetti, and one too few forks, the faculty of the Department of Philosophy at ACM University have been going through the papers of a recently deceased colleague. The faculty members were amazed to find numerous unpublished essays. They believe that the essays, collected into one volume, may constitute a major work of scholarship that will give their department some much-needed positive publicity. Naturally, all of the faculty members began to vie for the honor (to say nothing of the fame) of serving as editor of the collection.\r\n\r\nAfter much debate, the faculty members have narrowed the list to two candidates. Both applicants were asked to explain how they would arrange the essays within the final book. Both have noted that many of the essays define terminology and concepts that are explored in other essays. Both have agreed to the basic principle that an essay that _uses_ a term must appear _after_ the essay that _defines_ that term. One of the candidates has presented what he claims is the only possible arrangement of the essays, under\r\nthose constraints, and is arguing that he should be given the job simply because he has already done this major part of the work. The second candidate scoffs at this claim, insisting that there are many possible arrangements of the essays, and that an editor of true skill (himself) is needed to choose the optimal arrangement.\r\n\r\nWrite a program to determine if zero, one, or more than one arrangement of the essays is possible.','There will be multiple test cases in the input. Each test case will begin with a line with two integers, **_n_** (1 ≤ **_n_** ≤ 1,000) and **_m_** (1 ≤ **_m_** ≤ 500,000), where **_n_** is the number of essays, and **_m_** is the number of relationships between essays caused by sharing terms. They will be separated by a single space. On each of the next **_m_** lines will be two integers, **_d_** followed by **_u_** (1 ≤ **_d_**, **_u_** ≤ **_n_**, **_d_** ≠ **_u_**) which indicate that some term is defined in essay **_d_** and used in essay **_u_**. Integers **_d_** and **_u_** will be separated by a single space. The input will end with two **0**s on their own line.','For each test case, output a **0** if no arrangement is possible, a **1** if exactly one arrangement is possible, or a **2** if multiple arrangements are possible (output **2** no matter how many arrangements there are). Output no extra spaces, and do not separate answers with blank lines.'),(96,90,'Suppose you are tracking some satellites. Each satellite broadcasts a ‘Ping’ at a regular interval, and the intervals are unique (that is, no two satellites ping at the same interval). You need to know which satellites you can hear from your current position. The problem is that the pings cancel each other out. If an even number of satellites ping at a given time, you won’t hear anything, and if an odd number ping at a given time, it sounds like a single ping. All of the satellites ping at time 0, and then each pings\r\nregularly at its unique interval.\r\n\r\nGiven a sequence of pings and non-pings, starting at time 0, which satellites can you determine that you can hear from where you are? The sequence you’re given may, or may not, be long enough to include all of the satellites’ ping intervals. There may be satellites that ping at time 0, but the sequence isn’t long enough for you to hear their next ping. You don’t have enough information to report about these satellites. Just report about the ones with an interval short enough to be in the sequence of pings.','There will be several test cases in the input. Each test case will consist of a single string on its own line, with from 2 to 1,000 characters. The first character represents time 0, the next represents time 1, and so on. Each character will either be a 0 or a 1, indicating whether or not a ping can be heard at that time (0=No, 1=Yes). Each input is guaranteed to have at least one satellite that can be heard. The input will end with a line with a single **0**.','For each test case, output a list of integers on a single line, indicating the intervals of the satellites that you know you can hear. Output the intervals in order from smallest to largest, with a single space between them. Output no extra spaces, and do not separate answers with blank lines.'),(97,90,'In 1960, Donald Wall of IBM, in White Plains, NY, proved that the series obtained by taking each element of the _Fibonacci_ series modulo `m` was periodic.\r\n\r\nFor example, the first ten elements of the _Fibonacci_ sequence, as well as their remainders modulo `11`, are:\r\n\r\n    n           | 1 2 3 4 5 6  7  8  9 10\r\n    F(n)        | 1 1 2 3 5 8 13 21 34 55\r\n    F(n) mod 11 | 1 1 2 3 4 5  2 10  1  0\r\n\r\nThe sequence made up of the remainders then repeats. Let `k(m)` be the length of the repeating subsequence; in this example, we see `k(11) = 10`.\r\n\r\nWall proved several other properties, some of which you may find interesting:\r\n\r\n* If `m > 2, k(m)` is even.\r\n* For any even integer `n > 2`, there exists m such that `k(m) = n`.\r\n* `k(m) ≤ m`<sup>`2`</sup>` - 1`\r\n* `k(2`<sup>`n`</sup>`) = 3 * 2`<sup>`(n - 1)`</sup>\r\n* `k(5`<sup>`n`</sup>`) = 4 * 5`<sup>`n`</sup>\r\n* `k(2 * 5`<sup>`n`</sup>`) = 6n`\r\n* If `n > 2, k(10`<sup>`n`</sup>`) = 15 * 10`<sup>`(n-1)`</sup>\r\n\r\nFor this problem,  you must write a program that calculates the length of the repeating subsequence, `k(m)`, for different modulo values `m`.','The first line of input contains a single integer **_P_**, (1 ≤ **_P_** ≤ 1000), which is the number of data sets that follow. Each data set is a single line that consists of two space seperated integer values **_N_** and **_M_**. **_N_** is the data set number. **_M_** is the modulo value (2 ≤ `m` ≤ 1,000,000).','For each data set there is one line of output. It contains the data set number (**_N_**) followed be a single space, followed by the length of the repeating subsequence for **_M, k(M)_**.'),(98,90,'Pizza has always been a staple on college campuses. After the downturn in the economy, it is more important than ever to get the best deal, namely the lowest cost per square inch. Consider, for example, the following menu for a store selling circular pizzas of varying diameter and price:\r\n\r\n\r\n![alt text](//i.imgur.com/vHj61Jd.png \"Figure 1\")\r\n\r\n\r\n\r\nOne could actually compute the costs per square inch, which would be approximately 10.2¢, 7.6¢, and 7.1¢ respectively, so the 12-inch pizza is the best value. However, if the 10-inch had been sold for $5, it would have been the best value, at approximately 6.4¢ per square inch. \r\n\r\n\r\nYour task is to analyze a menu and to report the _diameter_ of the pizza that is the best value. Note that no two pizzas on a menu will have the same diameter or the same inherent cost per square inch.','The input contains a series of one or more menus. Each menu starts with the number of options _N_, 1 ≤ _N_ ≤ 10, followed by _N_ lines, each containing two integers respectively designating a pizza\'s diameter _D_ (in inches) and price _P_ (in dollars), with 1 ≤ _D_ ≤ 36 and 1 ≤ _P_ ≤ 100. The end of the input will be designated with a line containing the number 0.','For each menu, print a line identifying the menu number and the diameter _D_ of the pizza with the best\r\nvalue, using the format shown below.'),(99,90,'You are helping a political party canvas their members. The party has a list of candidates they wish to support, and they also have a list of members, each of which supports one candidate.\r\n\r\nThe party wants for you to sort the list of members, according to some rules. You will be given the list of candidates, in the desired order. Then, you’ll have access to a list of supporters; each supporter will have one candidate that they support.\r\n\r\nThe party wants you to put the list of supporters in order, sorted by their preferred candidate. There may be some supporters who support the same candidate. If so, order them in the order that they appear on the original list. Some supporters may have a ‘write-in’ candidate, thereby mentioning a candidate who was not on the original preferred candidate list. Put these supporters at the end, grouped by candidate, in the order that their _candidates_ appear in the list of supporters. There also may be candidates who have no supporters. They will probably be taken off the list later, but\r\nthat’s just the politics of the situation.','There will be several test cases in the input. Each test case will begin with a line with two integers, **_n_** (1 ≤ **_n_** ≤ 1,000) and **_m_** (1 ≤ **_m_** ≤ 100,000), where **_n_** is the number of candidates, and **_m_** is the number of supporters. On the following **_n_** lines will be the names of the candidates, one per line. These names will each be a single word consisting of from 1 to 30 capital letters. All **_n_** listed candidate names in any test case will be unique. After the candidates, the next **_m_** lines will describe the supporters, one per line. Each of these lines will contain two words separated with a single space. Each word contains from 1 to 30 capital letters. The first word is the name of the supporter, and the second is the name of the candidate that they support. The input will end with a line with two **0**s.','For each test case, print out the names of the supporters, one name per line, in the requested order. Do not output any spaces. Do not separate answers with a blank line.'),(100,10,'Midterm elections are here! Help your local election commission by counting votes and telling them the winner. If more than one candidate ties with the most votes, print out all of their names in alphabetical order.','Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with an integer **_n_** (1 ≤ **_n_** ≤ 1,000), indicating the number of votes. The next **_n_** lines will hold the votes. The candidates’ names will appear one per line, and consist of between 1 and 20 capital letters only.','Output the name of the candidate with the most votes. If there is a tie, output out all of the names of candidates with the most votes, one per line, in alphabetical order. Do not output any spaces, and do not output blank lines between names.');
/*!40000 ALTER TABLE `problem_data` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problem_solved`
--

DROP TABLE IF EXISTS `problem_solved`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `problem_solved` (
  `username` varchar(32) NOT NULL DEFAULT '',
  `pid` int(11) NOT NULL DEFAULT '0',
  `submit_time` int(11) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`username`,`pid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `problems`
--

DROP TABLE IF EXISTS `problems`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `problems` (
  `pid` int(32) NOT NULL AUTO_INCREMENT,
  `shortname` varchar(32) NOT NULL DEFAULT '',
  `name` varchar(128) NOT NULL,
  `appeared` varchar(128) NOT NULL,
  `difficulty` varchar(8) NOT NULL,
  `added` int(10) unsigned NOT NULL,
  `comp_release` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`pid`),
  KEY `comp_release` (`comp_release`),
  CONSTRAINT `problems_ibfk_1` FOREIGN KEY (`comp_release`) REFERENCES `comp_names` (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=242 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problems`
--

LOCK TABLES `problems` WRITE;
/*!40000 ALTER TABLE `problems` DISABLE KEYS */;
LOCK TABLES `problems` WRITE;
/*!40000 ALTER TABLE `problems` DISABLE KEYS */;
INSERT INTO `problems` VALUES (1,'alchemy','Alchemy','2014 Southeast','100',1423253399,NULL),(2,'balloons','Balloons','2010 Southeast','81',0,NULL),(3,'bitcounting','Bit Counting','2010 Southeast','99',0,NULL),(4,'blackvienna','Black Vienna','2009 Mid-Central','100',1425098610,NULL),(5,'blockgame','Block Game','2009 Southeast','94',0,NULL),(6,'bounce','Bounce','2012 Mid-Central','93',1422482989,NULL),(7,'bulletinboard','Bulletin Board','2008 Mid-Central','99',1428127324,NULL),(8,'burnout','Burnout','2011 Southeast','100',0,NULL),(9,'undergroundcables','Underground Cables','2010 Southeast','72',0,NULL),(10,'judges\'timecalculation','Judges\' Time Calculation','2010 Mid-Central','18',1423893127,NULL),(11,'candystore','Candy Store','2012 Southeast','71',0,NULL),(12,'electriccarrally','Electric Car Rally','2013 Southeast','93',0,NULL),(13,'cashcow','Cash Cow','2013 Mid-Central','78',1413007692,NULL),(14,'celltowers','Cell Towers','2009 Mid-Central','86',1425098610,NULL),(15,'chomp','Chomp','2013 Greater NY','73',1424491042,NULL),(16,'thendaysofchristmas','The n Days of Christmas','2013 Southeast','54',0,NULL),(17,'circuits','Series / Parallel Resistor Circuits','2008 Southeast','96',0,NULL),(18,'collision','Collision Detection','2012 Southeast','96',0,NULL),(19,'combinationlock','Combination Lock','2008 Southeast','23',0,NULL),(20,'component','Component Testing','2012 Southeast','99',0,NULL),(21,'imagecompression','Image Compression','2010 Mid-Central','75',1423893123,NULL),(22,'containment','Containment','2014 Southeast','96',1423253439,NULL),(23,'contraband','Contraband','2013 Greater NY','88',1424491042,NULL),(24,'countyourcousins','Count your Cousins','2013 Southeast','63',0,NULL),(25,'crashandgorelians','Crash and Go(relians)','2011 Mid-Central','65',1425705642,NULL),(26,'cutthecake','Cut the Cake','2013 Southeast','69',0,NULL),(27,'data','Data Recovery','2010 Southeast','100',0,NULL),(28,'decimalrepresentation','Decimal Representation','2013 Southeast','69',0,NULL),(29,'derangedexams','Deranged Exams','2013 Greater NY','59',1424491042,NULL),(30,'digitsum','Digit Sum','2013 Mid-Central','28',1413007683,NULL),(31,'dull','DuLL','2009 Mid-Central','46',1425098610,NULL),(32,'duplicateremoval','Duplicate Removal','2009 Mid-Central','6',1425098610,NULL),(33,'egyptian','Egyptian Fractions','2010 Mid-Central','83',1423893127,NULL),(34,'equalangles','Equal Angles','2010 Southeast','97',0,NULL),(35,'euclid','Euclid','2009 Southeast','70',0,NULL),(36,'fallingice','Falling Ice','2006 Mid-Central','99',1427909367,NULL),(37,'family','Family Fortune','2011 Southeast','100',0,NULL),(38,'flooringtiles','Flooring Tiles','2011 Southeast','88',0,NULL),(39,'foldinggame','Folding Game','2011 Southeast','97',0,NULL),(40,'refrigeratormagnets','Refrigerator Magnets','2011 Mid-Central','6',1425705642,NULL),(41,'frugalsearch','Frugal Search','2006 Mid-Central','57',1427909367,NULL),(42,'funhouse','Fun House','2014 Mid-Central','34',1426310855,NULL),(43,'funhouse','Funhouse','2012 Southeast','100',0,NULL),(44,'gnomesequencing','Gnome Sequencing','2009 Mid-Central','4',1425098610,NULL),(45,'goldleaf','Gold Leaf','2014 Southeast','96',1423253450,NULL),(46,'gorelians','Go Go Gorelians','2006 Mid-Central','83',1427909367,NULL),(47,'gradeschoolmultiplication','Grade School Multiplication','2011 Mid-Central','44',1425705642,NULL),(48,'grimmproblem','A Terribly Grimm Problem','2012 Southeast','96',0,NULL),(49,'headstails','Heads or Tails','2012 Southeast','100',0,NULL),(50,'heartcountry','The Heart of the Country','2008 Southeast','80',0,NULL),(51,'hexagram','Hexagram','2011 Southeast','90',0,NULL),(52,'hextile','Hex Tile Equations','2008 Mid-Central','99',1428127324,NULL),(53,'hillnumber','Hill Number','2014 Southeast','89',1423253463,NULL),(54,'islandsinthedatastream','Islands in the Data Stream ','2013 Greater NY','6',1424491042,NULL),(55,'jugglefest','Jugglefest','2012 Mid-Central','40',1422482981,NULL),(56,'knightmoves','Knight Moves','2014 Southeast','66',1423253699,NULL),(57,'knights','Knights','2014 Southeast','96',1423253473,NULL),(58,'knitting','Knitting','2009 Southeast','10',0,NULL),(59,'lampyridaeteleportae','Lampyridae Teleportae','2008 Mid-Central','49',1428127324,NULL),(60,'lasertag','Laser Tag','2011 Mid-Central','100',1425705642,NULL),(61,'lawrence','Lawrence of Arabia','2008 Southeast','97',0,NULL),(62,'leprechaun','The Leprechaun Hunt','2014 Mid-Central','100',1426310855,NULL),(63,'lettercubes','Letter Cubes','2013 Mid-Central','96',1413007659,NULL),(64,'shoringupthelevees','Shoring Up the Levees','2008 Southeast','78',0,NULL),(65,'lexicography','Lexicography','2014 Mid-Central','82',1426310855,NULL),(66,'linecirclemaze','Line & Circle Maze','2008 Mid-Central','100',1428127324,NULL),(67,'fred\'slottotickets','Fred\'s Lotto Tickets','2008 Southeast','9',0,NULL),(68,'lrucaching','LRU Caching','2012 Mid-Central','33',1422482967,NULL),(69,'madscientist','Mad Scientist','2010 Mid-Central','13',1423893127,NULL),(70,'marblemadness','Marble Madness','2014 Southeast','70',1423253714,NULL),(71,'markwizard','The Mark of a Wizard','2012 Mid-Central','99',1422482952,NULL),(72,'maxsquare','Maximum Square','2010 Southeast','79',0,NULL),(73,'mazemakers','The Maze Makers','2014 Mid-Central','89',1426310855,NULL),(74,'minesweeper','Minesweeper','2009 Southeast','9',0,NULL),(75,'mirror,mirroronthewall','Mirror, Mirror on the Wall','2010 Mid-Central','5',1423893120,NULL),(76,'missingpages','Missing Pages','2013 Mid-Central','9',1413007633,NULL),(77,'mosaic','Mosaic','2009 Southeast','96',0,NULL),(78,'mountains','Beautiful Mountains','2013 Southeast','99',0,NULL),(79,'movingpoints','Moving Points','2011 Southeast','97',0,NULL),(80,'moremultiplication','(More) Multiplication','2014 Mid-Central','67',1426310855,NULL),(81,'museumguards','Museum Guards','2009 Southeast','100',0,NULL),(82,'nestedpalin','Nested Palindromes','2013 Southeast','90',0,NULL),(83,'ninjaway','The Ninja Way','2009 Southeast','98',0,NULL),(84,'reversenonogram','Reverse Nonogram','2012 Southeast','28',0,NULL),(85,'ano-winsituation','A No-Win Situation','2008 Southeast','74',0,NULL),(86,'numerals','A to Z Numerals','2009 Mid-Central','100',1425098610,NULL),(87,'linearpachinko','Linear Pachinko','2006 Mid-Central','25',1427909367,NULL),(88,'paintme','Paint Me','2012 Southeast','9',0,NULL),(89,'palindrometer','Palindrometer','2010 Southeast','26',0,NULL),(90,'paradox','Probability Paradox','2013 Mid-Central','99',1413007650,NULL),(91,'parity','Parity','2008 Mid-Central','3',1428127324,NULL),(92,'partygames','Party Games','2012 Southeast','69',0,NULL),(93,'powersofpascal','Powers of Pascal','2013 Greater NY','65',1424491042,NULL),(94,'perfectshuffle','Perfect Shuffle','2013 Southeast','18',0,NULL),(95,'duelingphilosophers','Dueling Philosophers','2012 Southeast','69',0,NULL),(96,'ping!','Ping!','2013 Southeast','51',0,NULL),(97,'pisanoperiods','Pisano Periods','2013 Greater NY','53',1424491042,NULL),(98,'pizzapricing','Pizza Pricing','2011 Mid-Central','6',1425705642,NULL),(99,'politics','Politics','2013 Southeast','54',0,NULL),(100,'polling','Polling','2014 Southeast','19',1423253729,NULL);
/*!40000 ALTER TABLE `problems` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sample_cases`
--

DROP TABLE IF EXISTS `sample_cases`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sample_cases` (
  `pid` int(32) NOT NULL DEFAULT '0',
  `case_num` int(11) NOT NULL DEFAULT '0',
  `input` text,
  `output` text,
  PRIMARY KEY (`pid`,`case_num`),
  CONSTRAINT `sample_cases_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `problems` (`pid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sample_cases`
--

LOCK TABLES `sample_cases` WRITE;
/*!40000 ALTER TABLE `sample_cases` DISABLE KEYS */;
INSERT INTO `sample_cases` VALUES (1,1,'8\n0 0 100 -100 -100\n0 0 50 -10 -10\n0 0 10 -100 1000\n0 0 1 100 100\n1000 1000 100 -1 1\n1000 1000 50 -1 1\n1000 1000 10 -1 1\n1000 1000 1 -1 1','1200\n4 3 1 2 5 6 7 8'),(2,1,'3 15 35\n10 20 10\n10 10 30\n10 40 10\n0 0 0','300'),(3,1,'31 31 3\n31 31 1\n27 31 1\n27 31 2\n1023 1025 1\n1023 1025 2\n0 0 0','1\n0\n0\n3\n1\n1'),(4,1,'9\nDGJLP EFOQR ACHMN BIK\n2 BJK 0\n3 ABK 1\n2 DEF 2\n2 EIL 1\n3 FIP 0\n1 GMO 1\n2 OQR 3\n3 ADQ 1\n1 EGJ 2\n3\nABCDE FGHIJ KLMNO PQR\n3 BKQ 1\n1 ADE 3\n2 CHJ 2\n0','8\n?'),(5,1,'C\n..AB..\n..AB..\nCCAB..\n......\n.DDEE.\n......\nA\n......\n......\n......\n......\nAA....\n......\nZ\n.ZZ..X\n.....X\n.....X\n.....Y\n.....Y\n.....Y\n*','5\n1\n-1'),(6,1,'3 3 2\n B D C\nC E B G\n B C B\n3 5 4\n A B E B D\nA C D C A D\n D B B B C\n3 3 4\n B D C\nC E B G\n B C B\n3 4 4\n B D H C\nC E F G B\n B C B C\n0','BCBCBC\nBCBDBCBD\nno solution\nBCBCBCBC'),(7,1,'3 45 40\n10 10 35 20\n20 25 40 35\n25 5 30 30\n1 20 30\n5 5 15 25\n2 2000 1000\n0 0 1000 1000\n1000 0 2000 1000\n3 10 10\n0 0 10 10\n0 0 10 10\n0 0 10 10\n0','1300 2 75\n400 1 200\n0 1 2000000\n0 3 100'),(8,1,'100\n20 30 40\n1000\n1 3 5\n1000\n1 (3 (5)*3 2)*2 7\n0','190\n1999\n2279'),(9,1,'4\n0 0\n0 10\n10 0\n10 10\n2\n0 0\n10 10\n0','30.00\n14.14'),(10,1,'3\n12 30 5 0\n7 0 2 59\n9 59 4 1','------+---------\n time | elapsed\n------+---------\n12:XX | XX - 30\n 1:XX | XX + 30\n 2:XX | XX + 90\n 3:XX | XX + 150\n 4:XX | XX + 210\n 5:XX | XX + 270\n------+---------\n time | elapsed\n------+---------\n 7:XX | XX\n 8:XX | XX + 60\n 9:XX | XX + 120\n------+---------\n time | elapsed\n------+---------\n 9:XX | XX - 59\n10:XX | XX + 1\n11:XX | XX + 61\n12:XX | XX + 121\n 1:XX | XX + 181\n 2:XX | XX + 241'),(11,1,'2 8.00\n700 7.00\n199 2.00\n3 8.00\n700 7.00\n299 3.00\n499 5.00\n0 0.00','796\n798'),(12,1,'4 4\n0 1\n0 1439 100\n0 2\n0 1439 75\n1 3\n0 720 150\n721 824 100\n825 1000 75\n1001 1439 150\n2 3\n0 1439 150\n3 2\n0 1\n0 10 200\n11 1439 300\n1 2\n0 10 200\n11 1439 300\n4 3\n0 1\n0 719 500\n720 1439 240\n1 2\n0 964 500\n965 1439 2\n2 3\n0 971 500\n972 1439 3\n0 0','180\n2360\n255'),(13,1,'3\nRYBBRBYYRY\nRRRBBBBBRR\nYRRBRBBBBR\nRYYBRYYRYY\nBRBBRBRBRY\nYYBYRBBRRB\nRYBBBBRYYY\nYBRBRBRYRB\nRYBBBBBBBY\nYBBRRRRRBB\nRBBRRBRYRR\nBBBRRYYYRR\nh 10\nj 1\ng 2\n3\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYBYYBBBBB\nYYBYYBBBBB\nc 2\nc 12\ng 1\n2\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYYYYBBBBB\nYYBYYBBBBB\nYYBYYBBBBB\ng 1\nc 12\n0','33\n62\n2'),(15,1,'4\n1 3 3 3\n2 3 1 0\n3 3 2 0\n4 97 64 35','1 W\n2 W\n3 L\n4 W'),(16,1,'1\n2\n3\n0','1\n4\n10'),(19,1,'80 20 40 50\n80 10 79 12\n0 0 0 0','409\n455'),(21,1,'4 80\n0000\n1000\n0011\n0011\n8 75\n11111000\n11110000\n11000011\n11000011\n11000100\n00000100\n00010011\n00010011\n4 75\n1101\n1111\n0111\n0011\n0','Image 1:\n0000\n1000\n0011\n0011\nImage 2:\n11110000\n11110000\n11110011\n11110011\n00000100\n00000100\n00000011\n00000011\nImage 3:\n1111\n1111\n1111\n1111'),(22,1,'1\n0 0 0','6'),(22,2,'2\n0 0 0\n0 0 1','10'),(22,3,'3\n0 0 0\n0 0 1\n0 1 1','14'),(24,1,'10 15\n1 3 4 5 8 9 15 30 31 32\n12 9\n3 5 6 8 9 10 13 15 16 22 23 25\n10 4\n1 3 4 5 8 9 15 30 31 32\n0 0','5\n1\n0'),(25,1,'5\n100 100 30\n130 80 30\n80 60 30\n120 150 30\n90 80 30\n6\n100 100 50\n145 125 10\n60 140 15\n160 145 20\n130 135 25\n80 80 30\n0','2\n3'),(26,1,'16 1 7 4\n-15 -9 14 -11\n-4 30 -3 -20\n-20 12 -10 7\n17 10 31 0\n0 0 0 0','5'),(28,1,'12\n19\n156\n0','10\n22\n152'),(29,1,'4\n1 4 1\n2 7 3\n3 10 5\n4 17 17','1 18\n2 3216\n3 2170680\n4 130850092279664'),(30,1,'5 1 2 7 8 9\n6 3 4 2 2 2 2\n9 0 1 2 3 4 0 1 2 3\n0','207\n447\n11257'),(31,1,'2 2 3\n500 600\n100 A\n200 B\n2 1 2\n5 4 8\n100 400 200 500 300\n250 AC\n360 ACE\n120 AB\n40 DE\n2 3 4 -3 1 2 -2 1\n0','1600\n2110'),(32,1,'5 1 22 22 22 3\n4 98 76 20 76\n6 19 19 35 86 86 86\n1 7\n0','1 22 3 $\n98 76 20 76 $\n19 35 86 $\n7 $'),(35,1,'0 0 5 0 0 5 3 2 7 2 0 4\n1.3 2.6 12.1 4.5 8.1 13.7 2.2 0.1 9.8 6.6 1.9 6.7\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0','5.000 0.800 0.000 0.800\n13.756 7.204 2.956 5.304'),(40,1,'I LOVE YOU\nI LOVE MUSTARD\nHAPPY BIRTHDAY\nGLAD U BORN\nSMILE\nIMAGINE\nWHATS UP DOC\nHAVE A NICE DAY\nEND','I LOVE MUSTARD\nGLAD U BORN\nSMILE\nWHATS UP DOC'),(41,1,'elk\ncow\nbat\n*\nea\nacm+e\nnm+o|jk+l\n**\ndebian\nslackware\ngentoo\nubuntu\nsuse\nfedora\nmepis\n*\nyts\ncab-e+n\nr-e|zjq|i+t|vs-p+e-u-c\n**\n#','bat\nNONE\nelk\n$\ngentoo\nubuntu\nNONE\n$'),(42,1,'11 6\nxxxxxxxxxxx\nx../..\\...x\nx..../....x\n*../......x\nx.........x\nxxxxxxxxxxx\n5 5\nxxxxx\n*...x\nx...x\nx...x\nxxxxx\n5 5\nxxxxx\nx./\\x\n*./.x\nx..\\x\nxxxxx\n6 6\nxxx*xx\nx/...x\nx....x\nx/./.x\nx\\./.x\nxxxxxx\n10 10\nxxxxxxxxxx\nx.../\\...x\nx........x\nx........x\nx.../\\..\\x\n*...\\/../x\nx........x\nx........x\nx...\\/...x\nxxxxxxxxxx\n0 0','HOUSE 1\nxxxxxxxxxxx\nx../..\\...x\nx..../....x\n*../......x\nx.........x\nxxxxxx&xxxx\nHOUSE 2\nxxxxx\n*...&\nx...x\nx...x\nxxxxx\nHOUSE 3\nxxxxx\nx./\\x\n*./.x\nx..\\&\nxxxxx\nHOUSE 4\nxxx*xx\nx/...x\nx....x\nx/./.&\nx\\./.x\nxxxxxx\nHOUSE 5\nxxxxxxxxxx\nx.../\\...x\nx........x\nx........x\n&.../\\..\\x\n*...\\/../x\nx........x\nx........x\nx...\\/...x\nxxxxxxxxxx'),(44,1,'3\n40 62 77\n88 62 77\n91 33 18','Gnomes:\nOrdered\nUnordered\nOrdered'),(47,1,'432 5678\n200001 90040\n246 70\n0 0','Problem 1\n    432\n   5678\n-------\n   3456\n  3024\n 2592\n2160\n-------\n2452896\nProblem 2\n     200001\n      90040\n-----------\n    8000040\n180000900\n-----------\n18008090040\nProblem 3\n  246\n 70\n-----\n17220'),(54,1,'4\n1 0 0 1 1 2 2 1 1 0 1 2 2 1 1 0\n2 0 1 2 3 4 3 2 1 2 3 4 3 2 1 0\n3 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\n4 0 1 2 3 4 5 6 7 6 5 4 3 2 1 0','1 4\n2 7\n3 7\n4 7'),(55,1,'3 3 4 5\n1 3\n3 3 5 4\n5 7 7 7 3 1\n0','ABCADBACDABCADBACDAB\nABCABCABCABCABCABCAB\nCRASH\nABCDEEDABCCBEDAADCBE'),(56,1,'5 4\nK...\n....\n.#..\n.#..\n...X','5'),(56,2,'3 3\nK..\n.X.\n...','-1'),(58,1,'3 3 1\n2\n50 6 4\n6 -2 -2 0\n0 0 0','15\n322'),(59,1,'2 0 0\n3 3\n4 4\n5 5\n6 6\n7 7\n- 1 - 1\n2 0 0\n3 3\n5 5\n7 7\n- 1 - 1\n1 0 5 0 5 0\n5 0 6 2\n4 0 5 5\n3 0 5 5\n4 5 4 5\n5 0 5 0\n5 5 5 5\n5 0 5 0\n- 1 - 1\n0 0 0','F i r e f l y 1 c a u g h t a t ( 6 , 6 )\nF i r e f l y 2 n o t c a u g h t\nF i r e f l y 3 c a u g h t a t ( 5 0 , 5 0 )'),(64,1,'1 2 1 5 5 2 2 0\n3.5 2.2 4.8 -9.6 -1.2 -4.4 -8.9 12.4\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0','5.100 11.459 3.400 9.045 0.900 6.659 0.600 4.876\n44.548 38.972 21.982 25.997 20.342 38.374 10.038 19.043'),(67,1,'1\n1 2 3 4 5 6\n9\n1 2 3 4 5 6\n10 9 8 7 12 11\n13 14 15 16 17 18\n19 20 21 22 23 24\n25 26 27 28 29 30\n31 32 33 34 35 36\n37 38 39 40 41 42\n43 44 45 46 47 48\n49 19 34 27 25 13\n0','No\nYes'),(68,1,'5 ABC!DEAF!B!\n3 WXWYZ!YZWYX!XYXY!\n5 EIEIO!\n0','Simulation 1\nABC\nCDEAF\nDEAFB\nSimulation 2\nWYZ\nWYX\nWXY\nSimulation 3\nEIO'),(69,1,'6 2 7 7 8 12 13\n1 4\n3 4 4 5\n3 0 4 5\n5 2 2 4 7 7\n0','1 1 2 2 2 2 2 4 5 5 5 5 6\n1 1 1 1\n1 1 1 1 3\n2 2 2 2 3\n1 1 3 3 4 4 4'),(70,1,'1\n2','0 0'),(70,2,'2\n2 3','5 2'),(70,3,'5\n2 0 20 0 2','48 8'),(70,4,'5\n9 1 2 1 9','44 20'),(74,1,'3 2\n..\n.*\n..\n5 5\n*.*.*\n..*..\n*****\n.....\n..**.\n0 0','11\n1*\n11\n*3*3*\n36*63\n*****\n24553\n01**1'),(75,1,'boowxod\nbidi\nbed\nbbb\n#','boxwood\nibid\nINVALID\nddd'),(76,1,'12 2\n12 9\n8 3\n0','1 11 12\n3 4 10\n4 5 6'),(80,1,'345 56\n12 27\n1 68\n9999 7\n3 3\n0 0','+---------------+\n|   3   4   5   |\n| +---+---+---+ |\n| |1 /|2 /|2 /| |\n| | / | / | / |5|\n|1|/ 5|/ 0|/ 5| |\n| +---+---+---+ |\n|/|1 /|2 /|3 /| |\n| | / | / | / |6|\n|9|/ 8|/ 4|/ 0| |\n| +---+---+---+ |\n|/ 3 / 2 / 0    |\n+---------------+\n+-----------+\n|   1   2   |\n| +---+---+ |\n| |0 /|0 /| |\n| | / | / |2|\n| |/ 2|/ 4| |\n| +---+---+ |\n| |0 /|1 /| |\n| | / | / |7|\n|3|/ 7|/ 4| |\n| +---+---+ |\n|/ 2 / 4    |\n+-----------+\n+-------+\n|   1   |\n| +---+ |\n| |0 /| |\n| | / |6|\n| |/ 6| |\n| +---+ |\n| |0 /| |\n| | / |8|\n|6|/ 8| |\n| +---+ |\n|/ 8    |\n+-------+\n+-------------------+\n|   9   9   9   9   |\n| +---+---+---+---+ |\n| |6 /|6 /|6 /|6 /| |\n| | / | / | / | / |7|\n|6|/ 3|/ 3|/ 3|/ 3| |\n| +---+---+---+---+ |\n|/ 9 / 9 / 9 / 3    |\n+-------------------+\n+-------+\n|   3   |\n| +---+ |\n| |0 /| |\n| | / |3|\n| |/ 9| |\n| +---+ |\n|  9    |\n+-------+'),(81,1,'3\n1 540\n00:00 00:00\n3 480\n08:00 10:00\n09:00 12:00\n13:00 19:00\n1 420\n17:00 00:00\n5\n1 720\n18:00 12:00\n1 1080\n00:00 23:00\n1 1080\n00:00 20:00\n1 1050\n06:00 00:00\n1 360\n18:00 00:00','1\n2\n1'),(84,1,'3\nXXX\n.XX\n.X.\n3\nX.X\n..X\nX..\n5\n..X..\n.XXX.\nX.X.X\n..X..\n..X..\n0','3\n2\n1\n1\n3\n2\n1 1\n1\n1\n1 1\n0\n2\n1\n3\n1 1 1\n1\n1\n1\n1\n5\n1\n1'),(85,1,'Q649T\nT34K35\nAA2T34A5KKQAJ\nJOKER','Yes\nNo\nYes'),(87,1,'/\\.|__/\\.\n_._/\\_|.__/\\./\\_\n...\n___\n./\\.\n_/\\_\n_|.|_|.|_|.|_\n____|_____\n#','61\n53\n100\n0\n100\n50\n53\n10'),(88,1,'50 8 20 8 350 2\n6 3\n3 3\n50 8 20 8 300 3\n6 3\n5 3\n3 3\n0 0 0 0 0 0','83\n95'),(89,1,'100000\n100001\n000121\n00456\n0','1\n0\n979\n44'),(91,1,'101e\n010010o\n1e\n000e\n110100101o\n#','1010\n0100101\n11\n0000\n1101001010'),(92,1,'4\nFRED\nSAM\nJOE\nMARGARET\n2\nFRED\nFREDDIE\n2\nJOSEPHINE\nJERRY\n0','K\nFRED\nJF'),(93,1,'3\n1 1 8 3\n2 9 21 13\n3 200 100000 99998','1 56\n2 8759577256290\n3 199998000000000'),(94,1,'4\nACE\nKING\nQUEEN\nJACK\n5\nSKIP\nDRAW-TWO\nREVERSE\nWILD\nWILD-DRAW-FOUR\n0','ACE\nQUEEN\nKING\nJACK\nSKIP\nWILD\nDRAW-TWO\nWILD-DRAW-FOUR\nREVERSE'),(95,1,'5 4\n1 5\n5 2\n3 2\n4 3\n5 4\n3 1\n4 2\n1 5\n5 4\n2 2\n1 2\n2 1\n0 0','2\n1\n0'),(96,1,'01000101101000\n1001000101001000\n0','1 2 3 6 8 10 11 13\n3 6 7 12 14 15'),(97,1,'5\n1 4\n2 5\n3 11\n4 123456\n5 987654','1 6\n2 20\n3 10\n4 15456\n5 332808'),(98,1,'3\n5 2\n10 6\n12 8\n3\n5 2\n10 5\n12 8\n4\n1 1\n24 33\n13 11\n6 11\n0','Menu 1: 12\nMenu 2: 10\nMenu 3: 24'),(99,1,'3 5\nSTEVENS\nMICHAELS\nJORDAN\nBOB JORDAN\nJACK STEVENS\nMACK MICHAELS\nBILL JORDAN\nCHRIS MATTHEWS\n1 5\nFRED\nSAM FRED\nARTHUR GEORGE\nDANIEL HERBERT\nMARK GEORGE\nMIKE HERBERT\n0 0','JACK\nMACK\nBOB\nBILL\nCHRIS\nSAM\nARTHUR\nMARK\nDANIEL\nMIKE'),(100,1,'5\nFRED\nBARNEY\nFRED\nFRED\nBARNEY','FRED'),(100,2,'5\nPORTHOS\nATHOS\nARAMIS\nPORTHOS\nATHOS','ATHOS\nPORTHOS');
/*!40000 ALTER TABLE `sample_cases` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `submits`
--

DROP TABLE IF EXISTS `submits`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `submits` (
  `job` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `pid` int(32) DEFAULT NULL,
  `username` varchar(32) NOT NULL,
  `shortname` varchar(32) DEFAULT NULL,
  `submit_time` int(11) unsigned NOT NULL,
  `auto_id` tinyint(1) NOT NULL,
  `file_type` varchar(4) NOT NULL,
  `result` varchar(8) DEFAULT NULL,
  PRIMARY KEY (`job`)
) ENGINE=InnoDB AUTO_INCREMENT=3347 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `username` varchar(32) NOT NULL,
  `passw` varchar(255) DEFAULT NULL,
  `display` varchar(32) NOT NULL,
  `admin` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`),
  FULLTEXT KEY `username` (`username`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES ('admin','$2b$12$95hJ.4TE68Aj15vIxv8gPOGD0AH.qw623YM/zlX99xmTA/DXpvflG','Admin User',1);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-03-30 15:58:32
